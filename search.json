[{"path":[]},{"path":"https://docs.ropensci.org/workloopR/CONTRIBUTING.html","id":"fixing-typos","dir":"","previous_headings":"","what":"Fixing typos","title":"CONTRIBUTING","text":"Small typos grammatical errors documentation may edited directly using GitHub web interface, long changes made source file. YES: edit roxygen comment .R file R/. : edit .Rd file man/.","code":""},{"path":"https://docs.ropensci.org/workloopR/CONTRIBUTING.html","id":"prerequisites","dir":"","previous_headings":"","what":"Prerequisites","title":"CONTRIBUTING","text":"make substantial pull request, always file issue make sure someone team agrees ’s problem. ’ve found bug, create associated issue illustrate bug minimal reprex.","code":""},{"path":"https://docs.ropensci.org/workloopR/CONTRIBUTING.html","id":"pull-request-process","dir":"","previous_headings":"","what":"Pull request process","title":"CONTRIBUTING","text":"recommend create Git branch pull request (PR). Look Travis AppVeyor build status making changes. README contain badges continuous integration services used package. recommend tidyverse style guide. can use styler package apply styles, please don’t restyle code nothing PR. use roxygen2. use testthat. Contributions test cases included easier accept. user-facing changes, add bullet top NEWS.md current development version header describing changes made followed GitHub username, links relevant issue(s)/PR(s).","code":""},{"path":"https://docs.ropensci.org/workloopR/CONTRIBUTING.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"CONTRIBUTING","text":"Please note workloopR project released Contributor Code Conduct. contributing project agree abide terms.","code":""},{"path":"https://docs.ropensci.org/workloopR/CONTRIBUTING.html","id":"see-ropensci-contributing-guide","dir":"","previous_headings":"","what":"See rOpenSci contributing guide","title":"CONTRIBUTING","text":"details.","code":""},{"path":"https://docs.ropensci.org/workloopR/CONTRIBUTING.html","id":"discussion-forum","dir":"","previous_headings":"","what":"Discussion forum","title":"CONTRIBUTING","text":"Check discussion forum question, use case, otherwise bug feature request software . think issue requires longer form discussion.","code":""},{"path":"https://docs.ropensci.org/workloopR/CONTRIBUTING.html","id":"prefer-to-email","dir":"","previous_headings":"","what":"Prefer to Email?","title":"CONTRIBUTING","text":"Email person listed maintainer DESCRIPTION file repo. Though note private discussions email don’t help others - course email totally warranted ’s sensitive problem kind.","code":""},{"path":"https://docs.ropensci.org/workloopR/CONTRIBUTING.html","id":"thanks-for-contributing","dir":"","previous_headings":"","what":"Thanks for contributing!","title":"CONTRIBUTING","text":"contributing guide adapted tidyverse contributing guide available https://raw.githubusercontent.com/r-lib/usethis/master/inst/templates/tidy-contributing.md","code":""},{"path":"https://docs.ropensci.org/workloopR/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://docs.ropensci.org/workloopR/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/workloopR/LICENSE.html","id":"0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://docs.ropensci.org/workloopR/LICENSE.html","id":"1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://docs.ropensci.org/workloopR/LICENSE.html","id":"2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://docs.ropensci.org/workloopR/LICENSE.html","id":"3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://docs.ropensci.org/workloopR/LICENSE.html","id":"4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://docs.ropensci.org/workloopR/LICENSE.html","id":"5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://docs.ropensci.org/workloopR/LICENSE.html","id":"6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://docs.ropensci.org/workloopR/LICENSE.html","id":"7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://docs.ropensci.org/workloopR/LICENSE.html","id":"8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://docs.ropensci.org/workloopR/LICENSE.html","id":"9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://docs.ropensci.org/workloopR/LICENSE.html","id":"10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://docs.ropensci.org/workloopR/LICENSE.html","id":"11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://docs.ropensci.org/workloopR/LICENSE.html","id":"12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://docs.ropensci.org/workloopR/LICENSE.html","id":"13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://docs.ropensci.org/workloopR/LICENSE.html","id":"14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://docs.ropensci.org/workloopR/LICENSE.html","id":"15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://docs.ropensci.org/workloopR/LICENSE.html","id":"16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://docs.ropensci.org/workloopR/LICENSE.html","id":"17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://docs.ropensci.org/workloopR/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"workloopR: Analysis of Work Loops and Other Data from Muscle Physiology Experiments.  Copyright (C) 2019 Vikram B. Baliga; Shreeram Senthivasan  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. workloopR Copyright (C) 2019 Vikram B. Baliga; Shreeram Senthivasan This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://docs.ropensci.org/workloopR/articles/Analyzing-workloops.html","id":"load-packages-and-data","dir":"Articles","previous_headings":"","what":"Load packages and data","title":"Analyzing work loop experiments in workloopR","text":"","code":"library(workloopR) library(magrittr) library(ggplot2) library(dplyr)"},{"path":"https://docs.ropensci.org/workloopR/articles/Analyzing-workloops.html","id":"visualize","dir":"Articles","previous_headings":"","what":"Visualize","title":"Analyzing work loop experiments in workloopR","text":"’ll now import workloop.ddf file included workloopR. experiment involved using gear ratio 2, ’ll use fix_GR() also implement correction. Ultimately, object classes workloop, muscle_stim, data.frame produced. muscle_stim objects used throughout workloopR help data formatting error checking across functions. Additionally setting class workloop allows functions understand data properties experiment types (twitch, tetanus) . Running summary() `muscle_stim shows handy summary file properties, data, experimental parameters. Let’s plot Time Force, Position, Stimulus (Stim) visualize time course work loop experiment. get plotted figure, ’ll transform data plotted. Please note aesthetic purposes - underlying data changed plotting complete.  ’s lot digest . blue trace shows change length muscle via cyclical, sinusoidal changes Position. dark gray Stim dots show stimulation vs. basis. Stimulus onset close muscle L0 stimulator zapped muscle four times pulses 0.2 ms width 300 Hz. resulting force development shown red. cycles length change stimulation occurred total 6 times (measuring L0--L0).","code":"## The file workloop.ddf is included and therefore can be accessed via ## system.file(\"subdirectory\",\"file_name\",\"package\") . We'll then use ## read_ddf() to import it, creating an object of class \"muscle_stim\". ## fix_GR() multiplies Force by 2 and divides Position by 2 workloop_dat <-   system.file(     \"extdata\",     \"workloop.ddf\",     package = 'workloopR') %>%   read_ddf(phase_from_peak = TRUE) %>%   fix_GR(GR = 2)  summary(workloop_dat) #> # Workloop Data: 3 channels recorded over 0.3244s #>  #> File ID: workloop.ddf #> Mod Time (mtime): 2024-02-29 05:54:21.341738 #> Sample Frequency: 10000Hz #>  #> data.frame Columns:  #>   Position (mm) #>   Force (mN) #>   Stim (TTL) #>  #> Stimulus Offset: 0.012s #> Stimulus Frequency: 300Hz #> Stimulus Width: 0.2ms #> Stimulus Pulses: 4 #> Gear Ratio: 2 #>  #> Cycle Frequency: 28Hz #> Total Cycles (L0-to-L0): 6 #> Amplitude: 1.575mm scale_position_to_force <- 3000  workloop_dat %>%   # Set the x axis for the whole plot   ggplot(aes(x = Time)) +   # Add a line for force   geom_line(aes(y = Force, color = \"Force\"),              lwd = 1) +   # Add a line for Position, scaled to approximately the same range as Force   geom_line(aes(y = Position * scale_position_to_force, color = \"Position\")) +   # For stim, we only want to plot where stimulation happens, so we filter the data   geom_point(aes(y = 0, color = \"Stim\"), size = 1,               data = filter(workloop_dat, Stim == 1)) +   # Next we add the second y-axis with the corrected units   scale_y_continuous(sec.axis = sec_axis(~ . / scale_position_to_force, name = \"Position (mm)\")) +   # Finally set colours, labels, and themes   scale_color_manual(values = c(\"#FC4E2A\", \"#4292C6\", \"#373737\")) +   labs(y = \"Force (mN)\", x = \"Time (secs)\", color = \"Parameter:\") +   ggtitle(\"Time course of \\n work loop experiment\") +   theme_bw() +   theme(legend.position = \"bottom\", legend.direction = \"horizontal\")"},{"path":"https://docs.ropensci.org/workloopR/articles/Analyzing-workloops.html","id":"select-cycles","dir":"Articles","previous_headings":"","what":"Select cycles","title":"Analyzing work loop experiments in workloopR","text":"now ready run select_cycles() function. function subsets data labels cycle prep analyze_workloop() function. many cases, researchers interested using final 3 cycles analyses. Accordingly, ’ll set keep_cycles parameter 4:6. One thing pay heed cycle definition, encoded cycle_def within arguments select_cycles(). three options cycles can defined named based starting (ending) points cycle. ’ll use L0--L0 option, encoded lo. function internally performs butterworth filtering Position data via signal::butter(). Position data often noisy, makes assessing true peak values difficult. default values bworth_order = 2 bworth_freq = 0.05 work well cases, recommend please plot data assess . keep things straightforward now can proceed analytical stage. Please see final section vignette details using select_cycles(). summary() function now reflects 3 cycles original 6 retained, getting \"retained_cycles\" attribute shows cycles 4, 5, 6 original data. avoid confusion numbering schemes original data new object, select_cycles() used label cycles letter. , cycle 4 now “”, 5 “b” 6 “c”.","code":"## Select cycles workloop_selected <-    workloop_dat %>%   select_cycles(cycle_def=\"lo\", keep_cycles = 4:6)  summary(workloop_selected) #> # Workloop Data: 4 channels recorded over 0.1086s #>  #> File ID: workloop.ddf #> Mod Time (mtime): 2024-02-29 05:54:21.341738 #> Sample Frequency: 10000Hz #>  #> data.frame Columns:  #>   Position (mm) #>   Force (mN) #>   Stim (TTL) #>   Cycle (letters) #>  #> Stimulus Offset: 0.012s #> Stimulus Frequency: 300Hz #> Stimulus Width: 0.2ms #> Stimulus Pulses: 4 #> Gear Ratio: 2 #>  #> Cycle Frequency: 28Hz #> Total Cycles (L0-to-L0): 6 #> Cycles Retained: 3 #> Amplitude: 1.575mm  attr(workloop_selected, \"retained_cycles\") #> [1] 4 5 6"},{"path":"https://docs.ropensci.org/workloopR/articles/Analyzing-workloops.html","id":"plot-the-work-loop-cycles","dir":"Articles","previous_headings":"","what":"Plot the work loop cycles","title":"Analyzing work loop experiments in workloopR","text":"","code":"workloop_selected %>%   ggplot(aes(x = Position, y = Force)) +   geom_point(size=0.3) +   labs(y = \"Force (mN)\", x = \"Position (mm)\") +   ggtitle(\"Work loop\") +   theme_bw()"},{"path":"https://docs.ropensci.org/workloopR/articles/Analyzing-workloops.html","id":"basics-of-analyze_workloop","dir":"Articles","previous_headings":"","what":"Basics of analyze_workloop()","title":"Analyzing work loop experiments in workloopR","text":"Now ’re ready use analyze_workloop(). , running select_cycles() beforehand necessary, switch using workloop_selected data object. Within analyze_workloop(), GR = option allows gear ratio corrected hasn’t already. already ran fix_GR() correct gear ratio 2, need use . , argument, use GR = 1, keeps data . Please take care ensure overcorrect gear ratio setting multiple times. induces multiplicative changes. E.g. setting GR = 3 object setting GR = 3 produces gear ratio correction 9.","code":""},{"path":"https://docs.ropensci.org/workloopR/articles/Analyzing-workloops.html","id":"using-the-default-simplify-false-version","dir":"Articles","previous_headings":"Basics of analyze_workloop()","what":"Using the default simplify = FALSE version","title":"Analyzing work loop experiments in workloopR","text":"argument simplify = affects output analyze_workloop() function. ’ll first take look organization “full” version, .e. keeping default simplify = FALSE. produces analyzed_workloop object essentially list organized cycle. Within , time-course data stored data.frame important metadata stored attributes. Users may typically want work net power cycle. Within analyzed_workloop object, two values stored attributes: \"work\" (J) \"net_power\" (W). get specific cycle: see e.g. first cycle organized: Within cycle’s data.frame, usual Time, Position, Force, Stim stored. Cycle, added via select_cycles(), denotes cycle identity Percent_of_Cycle displays time percentage particular cycle. analyze_workloop() also computes instantaneous velocity (Inst_Velocity) can sometimes noisy, leading us also apply butterworth filter velocity (Filt_Velocity). See function’s help file details tweak filtering. time course power (instantaneous power) also provided Inst_Power. variables can plot Time see time-course variable’s change cycle. example, plot instantaneous force cycle b:","code":"## Run the analyze_workloop() function workloop_analyzed <-   workloop_selected %>%   analyze_workloop(GR = 1)  ## Produces a list of objects.  ## The print method gives a simple output: workloop_analyzed #> File ID: workloop.ddf #> Cycles: 3 cycles kept out of 6 #> Mean Work: 0.0033 J #> Mean Power: 0.09589 W  ## How is the list organized? names(workloop_analyzed) #> [1] \"cycle_a\" \"cycle_b\" \"cycle_c\" ## What is work for the second cycle? attr(workloop_analyzed$cycle_b, \"work\") #> [1] 0.003282334  ## What is net power for the third cycle? attr(workloop_analyzed$cycle_c, \"net_power\") #> [1] 0.09812219 str(workloop_analyzed$cycle_a) #> Classes 'workloop', 'muscle_stim' and 'data.frame':  357 obs. of  9 variables: #>  $ Time            : num  0.119 0.119 0.119 0.12 0.12 ... #>  $ Position        : num  0.33 0.359 0.389 0.414 0.441 ... #>  $ Force           : num  1708 1718 1725 1734 1744 ... #>  $ Stim            : int  1 1 0 0 0 0 0 0 0 0 ... #>  $ Cycle           : chr  \"a\" \"a\" \"a\" \"a\" ... #>  $ Inst_Velocity   : num  NA -0.292 -0.292 -0.252 -0.271 ... #>  $ Filt_Velocity   : num  NA -0.143 -0.158 -0.172 -0.185 ... #>  $ Inst_Power      : num  NA -0.246 -0.272 -0.298 -0.322 ... #>  $ Percent_of_Cycle: num  0 0.281 0.562 0.843 1.124 ... #>  - attr(*, \"stimulus_frequency\")= int 300 #>  - attr(*, \"cycle_frequency\")= int 28 #>  - attr(*, \"total_cycles\")= num 6 #>  - attr(*, \"cycle_def\")= chr \"lo\" #>  - attr(*, \"amplitude\")= num 1.57 #>  - attr(*, \"phase\")= num -24.9 #>  - attr(*, \"position_inverted\")= logi FALSE #>  - attr(*, \"units\")= chr [1:8] \"s\" \"mm\" \"mN\" \"TTL\" ... #>  - attr(*, \"sample_frequency\")= num 10000 #>  - attr(*, \"header\")= chr [1:4] \"Sample Frequency (Hz): 10000\" \"Reference Area: NaN sq. mm\" \"Reference Force: NaN mN\" \"Reference Length: NaN mm\" #>  - attr(*, \"units_table\")='data.frame':  10 obs. of  5 variables: #>   ..$ Channel: chr [1:10] \"AI0\" \"AI1\" \"AI2\" \"AI3\" ... #>   ..$ Units  : chr [1:10] \"mm\" \"mN\" \"TTL\" \"\" ... #>   ..$ Scale  : num [1:10] 1 500 0.2 0 0 0 0 0 1 500 #>   ..$ Offset : num [1:10] 0 0 0 0 0 0 0 0 0 0 #>   ..$ TADs   : num [1:10] 0 0 0 0 0 0 0 0 0 0 #>  - attr(*, \"protocol_table\")='data.frame':   4 obs. of  5 variables: #>   ..$ Wait.s     : num [1:4] 0 0.01 0 0.1 #>   ..$ Then.action: chr [1:4] \"Stimulus-Train\" \"Sine Wave\" \"Stimulus-Train\" \"Stop\" #>   ..$ On.port    : chr [1:4] \"Stimulator\" \"Length Out\" \"Stimulator\" \"\" #>   ..$ Units      : chr [1:4] \".012, 300, 0.2, 4, 28\" \"28,3.15,6\" \"0,0,0,0,0\" \"\" #>   ..$ Parameters : logi [1:4] NA NA NA NA #>  - attr(*, \"stim_table\")='data.frame':   2 obs. of  5 variables: #>   ..$ offset         : num [1:2] 0.012 0 #>   ..$ frequency      : int [1:2] 300 0 #>   ..$ width          : num [1:2] 0.2 0 #>   ..$ pulses         : int [1:2] 4 0 #>   ..$ cycle_frequency: int [1:2] 28 0 #>  - attr(*, \"stimulus_pulses\")= int 4 #>  - attr(*, \"stimulus_offset\")= num 0.012 #>  - attr(*, \"stimulus_width\")= num 0.2 #>  - attr(*, \"gear_ratio\")= num 2 #>  - attr(*, \"file_id\")= chr \"workloop.ddf\" #>  - attr(*, \"mtime\")= POSIXct[1:1], format: \"2024-02-29 05:54:21\" #>  - attr(*, \"retained_cycles\")= int [1:3] 4 5 6 #>  - attr(*, \"work\")= num 0.00301 #>  - attr(*, \"net_power\")= num 0.0909 workloop_analyzed$cycle_b %>%   ggplot(aes(x = Percent_of_Cycle, y = Inst_Power)) +   geom_line(lwd = 1) +   labs(y = \"Instantaneous Power (W)\", x = \"Percent cycle\") +   ggtitle(\"Instantaneous power \\n during cycle b\") +   theme_bw() #> Warning: Removed 1 row containing missing values or values outside the scale range #> (`geom_line()`)."},{"path":"https://docs.ropensci.org/workloopR/articles/Analyzing-workloops.html","id":"setting-simpilfy-true-in-the-analyze_workloop-function","dir":"Articles","previous_headings":"Basics of analyze_workloop()","what":"Setting simpilfy = TRUE in the analyze_workloop() function","title":"Analyzing work loop experiments in workloopR","text":"simply want work net power cycle without retaining time-course data, set simplify = TRUE within analyze_workloop(). , work (J) net power (W) simply returned data.frame organized cycle. attributes stored.","code":"workloop_analyzed_simple <-   workloop_selected %>%   analyze_workloop(GR = 1, simplify = TRUE)  ## Produces a simple data.frame: workloop_analyzed_simple #>   Cycle        Work  Net_Power #> a     A 0.003007098 0.09085517 #> b     B 0.003282334 0.09870268 #> c     C 0.003601049 0.09812219 str(workloop_analyzed_simple) #> 'data.frame':    3 obs. of  3 variables: #>  $ Cycle    : chr  \"A\" \"B\" \"C\" #>  $ Work     : num  0.00301 0.00328 0.0036 #>  $ Net_Power: num  0.0909 0.0987 0.0981"},{"path":"https://docs.ropensci.org/workloopR/articles/Analyzing-workloops.html","id":"more-on-cycle-definitions-in-select_cycles","dir":"Articles","previous_headings":"","what":"More on cycle definitions in select_cycles()","title":"Analyzing work loop experiments in workloopR","text":"noted , three options cycle definitions within select_cycles(), encoded cycle_def. three options cycles can defined named based starting (ending) points cycle: L0--L0 (lo), peak--peak (p2p), trough--trough (t2t). highly recommend plot Position data using select_cycles(). pracma::findpeaks() function work data (especially sine waves), conceivable small, local ‘peaks’ may misinterpreted cycle’s true minimum maximum. also note edge cases (.e. first cycle final cycle) may also subject issues cycles super well defined via automated algorithm. , plot couple case examples show generally expect. recommend plotting data similar fashion verify select_cycles() behaving way expect.","code":"## Select cycles 4:6 using lo workloop_dat %>%   select_cycles(cycle_def=\"lo\", keep_cycles = 4:6) %>%   ggplot(aes(x = Time, y = Position)) +   geom_line() +   theme_bw() ## Select cycles 4:6 using p2p workloop_dat %>%   select_cycles(cycle_def=\"p2p\", keep_cycles = 4:6) %>%   ggplot(aes(x = Time, y = Position)) +   geom_line() +   theme_bw() ## here we see that via 'p2p' the final cycle is ill-defined because the return ## to L0 is considered a cycle. Using a p2p definition, what we actually want is ## to use cycles 3:5 to get the final 3 full cycles: workloop_dat %>%   select_cycles(cycle_def=\"p2p\", keep_cycles = 3:5) %>%   ggplot(aes(x = Time, y = Position)) +   geom_line() +   theme_bw() ## this difficulty in defining cycles may be more apparent by first plotting the  ## cycles 1:6, e.g. workloop_dat %>%   select_cycles(cycle_def=\"p2p\", keep_cycles = 1:6) %>%   ggplot(aes(x = Time, y = Position)) +   geom_line() +   theme_bw()"},{"path":"https://docs.ropensci.org/workloopR/articles/Calculating-twitch-kinetics.html","id":"load-packages-and-data","dir":"Articles","previous_headings":"","what":"Load packages and data","title":"Working with isometric experiments in workloopR","text":"","code":"library(workloopR) library(magrittr) library(ggplot2)"},{"path":"https://docs.ropensci.org/workloopR/articles/Calculating-twitch-kinetics.html","id":"visualize","dir":"Articles","previous_headings":"","what":"Visualize","title":"Working with isometric experiments in workloopR","text":"’ll now import twitch.ddf file included workloopR. Let’s plot Force vs. Time visualize time course force development relaxation.  plot reveals final row data Force = 0 likely artifact. can also see salient parts twitch occur ~ 0.075 ~ 0.2 seconds. ’ll just re-plot salient parts twitch setting new limits axes via ggplot2::xlim() ggplot2::ylim(). Please note change analyses - simply ease visualizing patterns.  Looks better!","code":"## The file twitch.ddf is included and therefore can be accessed via ## system.file(\"subdirectory\",\"file_name\",\"package\") . We'll then use ## read_ddf() to import it, creating an object of class \"muscle_stim\". twitch_dat <-   system.file(     \"extdata\",     \"twitch.ddf\",     package = 'workloopR') %>%   read_ddf() twitch_dat %>%   ggplot(aes(x = Time, y = Force)) +     geom_line() +     ylab(\"Force (mN)\") +     xlab(\"Time (sec)\") +     theme_minimal() ## Re-plot twitch_dat %>%   ggplot(aes(x = Time, y = Force)) +     geom_line(lwd = 1) +     xlim(0.075, 0.2) +     ylim(200, 450) +     xlab(\"Time (sec)\") +     ylab(\"Force (mN)\") +     theme_minimal() #> Warning: Removed 2750 rows containing missing values or values outside the scale range #> (`geom_line()`)."},{"path":"https://docs.ropensci.org/workloopR/articles/Calculating-twitch-kinetics.html","id":"basics-of-isometric_timing","dir":"Articles","previous_headings":"","what":"Basics of isometric_timing()","title":"Working with isometric experiments in workloopR","text":"Now ’re ready use isometric_timing(). function returns new data.frame provides information timing magnitude force various intervals within twitch. returned values absolute; words, time measured beginning file forces returned actual magnitudes. first five columns data.frame fixed. return (order): 1) ID file, 2) time stimulation occurs, 3) magnitude force stimulation occurs, 4) time peak force occurs, 5) magnitude peak force. function also provides data help describe rising relaxation phases twitch certain “set points”. default, rising phase set points 10% 90% peak force development. Timing force magnitudes points returned columns data.frame. relaxation phase, time magnitude force force relaxed 90% 50% peak force given. user flexibility specifying data grabbed rising falling phases. two arguments: rising = c() falling = c(). arguments can filled vector length. Within vector, “set points” must vector 0 100, signifying % peak force development described. example, ’d like describe rising phase six points (e.g. 5%, 10%, 25%, 50%, 75%, 95% peak force development):","code":"## Run the isometric_timing() function twitch_analyzed <-   twitch_dat %>%   isometric_timing()  twitch_analyzed #>      file_id time_stim force_stim time_peak force_peak time_rising_10 #> 1 twitch.ddf    0.1002    224.067    0.1141   412.4495         0.1048 #>   force_rising_10 time_rising_90 force_rising_90 time_relaxing_90 #> 1         244.389         0.1107        393.9015           0.1198 #>   force_relaxing_90 time_relaxing_50 force_relaxing_50 #> 1           394.063           0.1311          318.2585 ## Change rising supply a custom set of force development set points twitch_rising_custom <-   twitch_dat %>%   isometric_timing(rising = c(5, 10, 25, 50, 75, 95))  ## The returned `data.frame` contains the timing and force magnitudes ## of these set points in the \"..._rising_...\" columns twitch_rising_custom #>      file_id time_stim force_stim time_peak force_peak time_rising_5 #> 1 twitch.ddf    0.1002    224.067    0.1141   412.4495        0.1044 #>   force_rising_5 time_rising_10 force_rising_10 time_rising_25 force_rising_25 #> 1        234.712         0.1048         244.389         0.1057         273.743 #>   time_rising_50 force_rising_50 time_rising_75 force_rising_75 time_rising_95 #> 1          0.107             321         0.1087        366.1605         0.1118 #>   force_rising_95 time_relaxing_90 force_relaxing_90 time_relaxing_50 #> 1         403.579           0.1198           394.063           0.1311 #>   force_relaxing_50 #> 1          318.2585"},{"path":"https://docs.ropensci.org/workloopR/articles/Calculating-twitch-kinetics.html","id":"tetanus-trials","dir":"Articles","previous_headings":"Basics of isometric_timing()","what":"Tetanus trials","title":"Working with isometric experiments in workloopR","text":"isometric_timing() function can also work tetanus objects imported via read_ddf(). tetanus object used, set points relaxing automatically set relaxing = c(), excludes argument producing anything. Instead, timing & magnitude force stimulation, peak force, specified points rising phase returned. idea ‘relaxation’ simply ignored. demonstrate, ’ll use example tetanus trial included workloopR:","code":"tetanus_analyzed <-   system.file(     \"extdata\",     \"tetanus.ddf\",     package = 'workloopR') %>%   read_ddf() %>%   isometric_timing(rising = c(25, 50, 75))  tetanus_analyzed #>       file_id time_stim force_stim time_peak force_peak time_rising_25 #> 1 tetanus.ddf    0.1002   141.0045    0.1364   2626.289         0.1135 #>   force_rising_25 time_rising_50 force_rising_50 time_rising_75 force_rising_75 #> 1        763.4095         0.1184        1391.462         0.1236        2013.873"},{"path":"https://docs.ropensci.org/workloopR/articles/Calculating-twitch-kinetics.html","id":"computing-intervals","dir":"Articles","previous_headings":"","what":"Computing intervals","title":"Working with isometric experiments in workloopR","text":"returned data.frame provides timing force magnitudes absolute terms, .e. time since start file actual force magnitudes. Often, ’d like report characteristics twitch intervals. calculate, e.g. interval stimulation peak force (often reported “time peak force”):","code":"## Time to peak force from stimulation twitch_analyzed$time_peak - twitch_analyzed$time_stim #> [1] 0.0139"},{"path":"https://docs.ropensci.org/workloopR/articles/Calculating-twitch-kinetics.html","id":"annotate-the-twitch-plot","dir":"Articles","previous_headings":"","what":"Annotate the twitch plot","title":"Working with isometric experiments in workloopR","text":"also good plot metrics see pass eye-test. ’ll use analyzed twitch viridis package supply colors dots key points.  plot dots added six time&force points function returns default.","code":"## Create a color pallete ## Generated using `viridis::viridis(6)` ## We use hard-coded values here just to avoid extra dependencies  colz <- c(\"#440154FF\",\"#414487FF\",\"#2A788EFF\",           \"#22A884FF\",\"#7AD151FF\",\"#FDE725FF\")  twitch_dat %>%  ggplot(aes(x = Time, y = Force)) +    geom_line(lwd = 1) +    xlim(0.075, 0.2) +    ylim(200, 450) +    xlab(\"Time (sec)\") +    ylab(\"Force (mN)\") +    geom_point(x = twitch_analyzed$time_stim,                y = twitch_analyzed$force_stim,               color = colz[1], size = 3) +    geom_point(x = twitch_analyzed$time_peak,                y = twitch_analyzed$force_peak,               color = colz[4], size = 3) +    geom_point(x = twitch_analyzed$time_rising_10,                y = twitch_analyzed$force_rising_10,               color = colz[2], size = 3) +    geom_point(x = twitch_analyzed$time_rising_90,                y = twitch_analyzed$force_rising_90,               color = colz[3], size = 3) +    geom_point(x = twitch_analyzed$time_relaxing_90,                y = twitch_analyzed$force_relaxing_90,               color = colz[5], size = 3) +    geom_point(x = twitch_analyzed$time_relaxing_50,                y = twitch_analyzed$force_relaxing_50,               color = colz[6], size = 3) +    theme_minimal() #> Warning: Removed 2750 rows containing missing values or values outside the scale range #> (`geom_line()`)."},{"path":"https://docs.ropensci.org/workloopR/articles/Introduction-to-workloopR.html","id":"welcome-to-workloopr","dir":"Articles","previous_headings":"","what":"Welcome to workloopR","title":"Introduction to workloopR","text":"vignette, ’ll provide overview core functions workloopR. vignettes within package give details respect specific use-cases. Examples code can also found within function’s Help doc. workloopR (pronounced “work looper”) provides functions import, transformation, analysis muscle physiology experiments. may guessed, initial motivation provide functions analyze work loop experiments R, expanded goal cover additional types experiments often involved work loop procedures. three currently supported experiment types: work loop, simple twitch, tetanus.","code":""},{"path":"https://docs.ropensci.org/workloopR/articles/Introduction-to-workloopR.html","id":"analytical-pipelines","dir":"Articles","previous_headings":"","what":"Analytical pipelines","title":"Introduction to workloopR","text":"cut chase, workloopR offers ability import, transform, analyze data file. example, work loop file: Batch processing files within directory (e.g. successive trials experiment) also readily achieved: Sections give specific overviews.","code":"library(workloopR)  ## import the workloop.ddf file included in workloopR wl_dat <-read_ddf(system.file(\"extdata\", \"workloop.ddf\",                                package = 'workloopR'),                   phase_from_peak = TRUE)  ## select cycles 3 through 5 using a peak-to-peak definition wl_selected <- select_cycles(wl_dat, cycle_def = \"p2p\", keep_cycles = 3:5)  ## run the analysis function and get the full object wl_analyzed <- analyze_workloop(wl_selected, GR = 2) ## for brevity, the print() method for this object produces a simple output wl_analyzed #> File ID: workloop.ddf #> Cycles: 3 cycles kept out of 6 #> Mean Work: 0.00308 J #> Mean Power: 0.08474 W ## but see the structure for the full output, e.g. #str(wl_analyzed)  ## or run the analysis but get the simplified version wl_analyzed_simple <- analyze_workloop(wl_selected, simplify = TRUE, GR = 2) wl_analyzed_simple #>   Cycle        Work  Net_Power #> a     A 0.002785397 0.07639783 #> b     B 0.003147250 0.08661014 #> c     C 0.003305744 0.09122522 ## batch read and analyze files included with workloopR analyzed_wls <- read_analyze_wl_dir(system.file(\"extdata/wl_duration_trials\",                                                package = 'workloopR'),                                    cycle_def = \"p2p\",                                    keep_cycles = 2:4,                                    phase_from_peak = TRUE                                    )  ## now summarize summarized_wls <- summarize_wl_trials(analyzed_wls) summarized_wls #>         File_ID Cycle_Frequency Amplitude  Phase Stimulus_Pulses #> 1 01_4pulse.ddf              28      3.15 -24.36               4 #> 2 02_2pulse.ddf              28      3.15 -24.64               2 #> 3 03_6pulse.ddf              28      3.15 -24.92               6 #> 4 04_4pulse.ddf              28      3.15 -24.64               4 #>   Stimulus_Frequency      mtime     Mean_Work   Mean_Power #> 1                300 1709186061  0.0028362363  0.078967198 #> 2                300 1709186061  0.0009686570  0.026247519 #> 3                300 1709186061 -0.0001310863 -0.004017894 #> 4                300 1709186061  0.0024082708  0.066959552"},{"path":"https://docs.ropensci.org/workloopR/articles/Introduction-to-workloopR.html","id":"data-import","dir":"Articles","previous_headings":"","what":"Data import","title":"Introduction to workloopR","text":"Data stored .ddf format (e.g. generated Aurora Scientific’s Dynamic Muscle Control Analysis Software) easily imported via function read_ddf(). Two additional --one functions (read_analyze_wl() read_analyze_wl_dir()) also import data subsequently transform analyze . functions later! Importing via functions generates objects class muscle_stim, formatted work nicely workloopR’s core functions help error checking procedures throughout package. muscle_stim objects organized store time-series data Time, Position, Force, Stimulation data.frame also store core metadata experimental parameters Attributes. ’ll provide quick example using data included within package.","code":"library(workloopR)  ## import the workloop.ddf file included in workloopR wl_dat <-read_ddf(system.file(\"extdata\", \"workloop.ddf\",                                package = 'workloopR'),                   phase_from_peak = TRUE)  ## muscle_stim objects have their own print() and summary() S3 methods ## for example: summary(wl_dat) # some handy info about the imported file #> # Workloop Data: 3 channels recorded over 0.3244s #>  #> File ID: workloop.ddf #> Mod Time (mtime): 2024-02-29 05:54:21.341738 #> Sample Frequency: 10000Hz #>  #> data.frame Columns:  #>   Position (mm) #>   Force (mN) #>   Stim (TTL) #>  #> Stimulus Offset: 0.012s #> Stimulus Frequency: 300Hz #> Stimulus Width: 0.2ms #> Stimulus Pulses: 4 #> Gear Ratio: 1 #>  #> Cycle Frequency: 28Hz #> Total Cycles (L0-to-L0): 6 #> Amplitude: 3.15mm  ## see the first few rows of data stored within head(wl_dat) #> # Workloop Data: 3 channels recorded over 6e-04s #> File ID: workloop.ddf #>  #>    Time Position    Force Stim #> 1 1e-04 0.503939 304.8715    0 #> 2 2e-04 0.506197 305.5165    0 #> 3 3e-04 0.505552 304.8715    0 #> 4 4e-04 0.506197 304.3875    0 #> 5 5e-04 0.505229 305.1940    0 #> 6 6e-04 0.506842 305.0330    0"},{"path":"https://docs.ropensci.org/workloopR/articles/Introduction-to-workloopR.html","id":"attributes","dir":"Articles","previous_headings":"Data import","what":"Attributes","title":"Introduction to workloopR","text":", important object metadata experimental parameters stored attributes. make extensive use attributes throughout package functions update least one attribute completion. please see feature muscle_stim objects important info! can use attributes object (e.g. attributes(wl_dat)), ’ll avoid printout can pretty lengthy. Instead, let’s just look couple interesting ones.","code":"## names(attributes(x) gives a list of all the attributes' names names(attributes(wl_dat)) #>  [1] \"names\"              \"class\"              \"row.names\"          #>  [4] \"stimulus_frequency\" \"cycle_frequency\"    \"total_cycles\"       #>  [7] \"cycle_def\"          \"amplitude\"          \"phase\"              #> [10] \"position_inverted\"  \"units\"              \"sample_frequency\"   #> [13] \"header\"             \"units_table\"        \"protocol_table\"     #> [16] \"stim_table\"         \"stimulus_pulses\"    \"stimulus_offset\"    #> [19] \"stimulus_width\"     \"gear_ratio\"         \"file_id\"            #> [22] \"mtime\"  ## take a look at the stimulation protocol attr(wl_dat, \"protocol_table\") #>   Wait.s    Then.action    On.port                 Units Parameters #> 1   0.00 Stimulus-Train Stimulator .012, 300, 0.2, 4, 28         NA #> 2   0.01      Sine Wave Length Out             28,3.15,6         NA #> 3   0.00 Stimulus-Train Stimulator             0,0,0,0,0         NA #> 4   0.10           Stop                                          NA  ## at what frequency were cyclic changes to Position performed? attr(wl_dat, \"cycle_frequency\") #> [1] 28  ## at what frequency were data recorded? attr(wl_dat, \"sample_frequency\") #> [1] 10000"},{"path":"https://docs.ropensci.org/workloopR/articles/Introduction-to-workloopR.html","id":"data-from-files-that-are-not-of--ddf-format","dir":"Articles","previous_headings":"","what":"Data from files that are not of .ddf format","title":"Introduction to workloopR","text":"Data read file formats can constructed muscle_stim objects via as_muscle_stim(). need , please refer vignette “Importing data non .ddf sources” overview.","code":""},{"path":"https://docs.ropensci.org/workloopR/articles/Introduction-to-workloopR.html","id":"transformations-and-corrections-to-data","dir":"Articles","previous_headings":"","what":"Transformations and corrections to data","title":"Introduction to workloopR","text":"Prior analyses, data can transformed corrected. Transformational functions include gear ratio correction (fix_GR()) position inversion (invert_position()). core idea behind two functions correct issues related data acquisition. example, apply gear ratio correction 2:","code":"## this multiples Force by 2 ## and multiplies Position by (1/2) wl_fixed  <- fix_GR(wl_dat, GR = 2)  # quick check: max(wl_fixed$Force)/max(wl_dat$Force)       #5592.578 / 2796.289 = 2 #> [1] 2 max(wl_fixed$Position)/max(wl_dat$Position) #1.832262 / 3.664524 = 0.5 #> [1] 0.5"},{"path":"https://docs.ropensci.org/workloopR/articles/Introduction-to-workloopR.html","id":"a-particularly-important-transformation---select_cycles","dir":"Articles","previous_headings":"Transformations and corrections to data","what":"A particularly important transformation - select_cycles()","title":"Introduction to workloopR","text":"Another ‘transformational’ function select_cycles(), subsets cycles within work loop experiment. necessary step prior analyses work loop data: data labeled cycle use analyze_workloop().","code":""},{"path":"https://docs.ropensci.org/workloopR/articles/Introduction-to-workloopR.html","id":"data-analytical-functions","dir":"Articles","previous_headings":"","what":"Data analytical functions","title":"Introduction to workloopR","text":"Core analytical functions include analyze_workloop() work loop files isometric_timing() twitches. analyze_workloop() computes instantaneous velocity, net work, instantaneous power, net power work loop experiments per-cycle basis. isometric_timing() provides summarization twitch kinetics. see details functions, please refer “Analyzing work loop experiments workloopR” work loop analyses “Working twitch files workloopR” twitches. functions readily available batch processing files. read_analyze_wl_dir() function allows batch import, cycle selection, gear ratio correction, ultimately work & power computation work loop experiment files within specified directory. get_wl_metadata() summarize_wl_trials() functions organize scanned files recency (according time last modification: ‘mtime’) report work power output order trials run. ultimately allows time_correct() function correct degradation muscle (according power & work) time, assuming first final trials identical experimental parameters. parameters identical, advise using function.","code":""},{"path":"https://docs.ropensci.org/workloopR/articles/Introduction-to-workloopR.html","id":"thanks-for-reading","dir":"Articles","previous_headings":"","what":"Thanks for reading!","title":"Introduction to workloopR","text":"Please feel free contact either Vikram Shree suggestions code development requests. especially interested expanding data import functions accommodate file types .ddf future versions workloopR.","code":""},{"path":"https://docs.ropensci.org/workloopR/articles/Plotting-workloopR.html","id":"loading-packages-and-data","dir":"Articles","previous_headings":"","what":"Loading packages and data","title":"Plotting data in workloopR","text":"","code":"library(workloopR) library(magrittr) library(ggplot2) library(purrr) library(tidyr) library(dplyr)"},{"path":[]},{"path":"https://docs.ropensci.org/workloopR/articles/Plotting-workloopR.html","id":"working-with-single-files","dir":"Articles","previous_headings":"Plotting workloop objects","what":"Working with single files","title":"Plotting data in workloopR","text":"Let’s start visualizing raw traces data files, specifically position, force, stimulation time.  Next, select cycles workloop preparation analysis. , let’s keep cycles visualize select_cycles() splits data. Note can include 0 keep_cycles argument include data categorized outside complete cycle. assigns single cycle label () data complete cycles.  Visualizing cycles highly recommended case noise experimental procedure interpreted cycle. Let’s go ahead use cycles 2 5 (labeled c-f previous plot). Note however cycle labels reassigned -d subset data. Now let’s plot work loops!","code":"workloop_dat<-   system.file(     \"extdata\",     \"workloop.ddf\",     package = 'workloopR') %>%   read_ddf(phase_from_peak = TRUE) %>%   fix_GR(2) # To overlay position and force, we need them to be on comparable scales # We will then use two y-axis to make the units clear scale_position_to_force <- 3000  workloop_dat %>%   # Set the x axis for the whole plot   ggplot(aes(x = Time)) +   # Add a line for force   geom_line(aes(y = Force, color = \"Force\"),             lwd = 1) +   # Add a line for Position, scaled to approximately the same range as Force   geom_line(aes(y = Position * scale_position_to_force, color = \"Position\")) +   # For stim, we only want to plot where stimulation happens, so we filter the data   geom_point(aes(y = 0, color = \"Stim\"), size = 1,              data = filter(workloop_dat, Stim == 1)) +   # Next we add the second y-axis with the corrected units   scale_y_continuous(sec.axis = sec_axis(~ . / scale_position_to_force, name = \"Position (mm)\")) +   # Finally set colours, labels, and themes   scale_color_manual(values = c(\"#FC4E2A\", \"#4292C6\", \"#373737\")) +   labs(y = \"Force (mN)\", x = \"Time (secs)\", color = \"Parameter:\") +   ggtitle(\"Time course of \\n work loop experiment\") +   theme_bw() +   theme(legend.position = \"bottom\", legend.direction = \"horizontal\") # Let's calculate x and y positions to add labels for each cycle workloop_dat<-   workloop_dat %>%   select_cycles('lo', 0:6)  label_dat<-   workloop_dat %>%   group_by(Cycle) %>%   summarize(     x = mean(Time)   ) %>%   # And add another row for the incomplete cycles at the beginning   bind_rows(data.frame(     Cycle = 'a',     x = 0))  workloop_dat %>%   ggplot(aes(x = Time, y = Position, colour = Cycle)) +   geom_point(size=1) +   geom_text(aes(x, y=2.1, colour = Cycle, label = Cycle), data = label_dat) +   labs(y = \"Position (mm)\", x = \"Time (secs)\") +   ggtitle(\"Division of position\\nby `select_cycles()`\") +   theme_bw() +   theme(legend.position = \"none\") workloop_dat<-   workloop_dat %>%   select_cycles('p2p', 2:5) # Let's start with a single cycle using colour to indicate time workloop_dat %>%   filter(Cycle == 'a') %>%   ggplot(aes(x = Position, y = Force)) +   geom_path(aes(colour = Time)) +   labs(y = \"Force (mN)\", x = \"Position (mm)\", colour = \"Time (sec)\") +   ggtitle(\"Single work loop\") +   theme_bw() +   theme(legend.position = \"bottom\", legend.direction = \"horizontal\") # Now let's see how the work loop changes across cycles # We can use arrows to indicate direction through time workloop_dat %>%   ggplot(aes(x = Position, y = Force)) +   geom_path(aes(colour = Cycle), arrow=arrow()) +   labs(y = \"Force (mN)\", x = \"Position (mm)\", colour = \"Cycle index\") +   ggtitle(\"Work loops by cycle index\") +   theme_bw() +   theme(legend.position = \"bottom\", legend.direction = \"horizontal\")"},{"path":"https://docs.ropensci.org/workloopR/articles/Plotting-workloopR.html","id":"working-with-single-files-1","dir":"Articles","previous_headings":"Plotting workloop objects","what":"Working with single files","title":"Plotting data in workloopR","text":"Working multiple files little trickier multiple data stored separate data.frames organized list. easiest way deal issue add column specifying file id concatenating data together. Refer “Batch processing” vignette information working multiple files.","code":"multi_workloop_dat<-   system.file(     \"extdata/wl_duration_trials\",     package = 'workloopR') %>%   read_ddf_dir(phase_from_peak = TRUE) %>%   map(fix_GR, 2) %>%   map(select_cycles,'p2p', 4) %>%   map(analyze_workloop)  # Summarize provides a quick way to pull out most experimental parameters, etc multi_workloop_dat %>%   summarize_wl_trials %>%   ggplot(aes(Stimulus_Pulses, Mean_Power)) +   geom_point() +   labs(y = \"Mean Power (W)\", x = \"Stim Duration (pulses)\") +   ggtitle(\"Mean power over trial\\nby stimulus duration\") +   theme_bw() +   theme(legend.position = \"bottom\", legend.direction = \"horizontal\") # Accessing the time course data requires more manipulation multi_workloop_dat %>%   map(~ mutate(.x$cycle_a, stim_pulses = attr(.x, \"stimulus_pulses\"))) %>%   bind_rows %>%   ggplot(aes(Percent_of_Cycle, Inst_Power)) +   geom_path(aes(colour = as.factor(stim_pulses)))+   labs(y = \"Power (W)\", x = \"Percent of Cycle\", colour = \"Stim Duration\") +   ggtitle(\"Time course of instantaneous\\npower by stimulus duration\") +   theme_bw() +   theme(legend.position = \"bottom\", legend.direction = \"horizontal\") #> Warning: Removed 3 rows containing missing values or values outside the scale range #> (`geom_path()`)."},{"path":[]},{"path":"https://docs.ropensci.org/workloopR/articles/Plotting-workloopR.html","id":"working-with-single-files-2","dir":"Articles","previous_headings":"Plotting isometric objects","what":"Working with single files","title":"Plotting data in workloopR","text":"One useful visualization isometric data annotating peak force timing points. single file multiple set points, manipulation useful make annotating little cleaner.","code":"twitch_dat<-   system.file(     \"extdata\",     \"twitch.ddf\",     package = 'workloopR') %>%   read_ddf() %>%   fix_GR(2)  # We now need to reshape the single row into three columns, a label for the point, an x value for the label (time), and a y value (force). See the `tidyr` package and associated vignettes on reshaping tips label_dat<-   twitch_dat %>%   isometric_timing(c(10,90),50) %>%   gather(label, value) %>%   filter(label != 'file_id') %>%   separate(label, c(\"type\", \"identifier\"), \"_\", extra=\"merge\") %>%   spread(type,value) label_dat$time<-as.numeric(label_dat$time) label_dat$force<-as.numeric(label_dat$force)  ggplot() +   geom_line(aes(Time, Force), data = twitch_dat) +   geom_point(aes(time, force), data = label_dat) +   geom_text(aes(time, force, label = identifier), hjust=-0.15, data = label_dat) +   labs(y = \"Force (mN)\", x = \"Time (sec)\") +   ggtitle(\"Force development in a twitch trial\") +   theme_bw() +   theme(legend.position = \"bottom\", legend.direction = \"horizontal\")"},{"path":"https://docs.ropensci.org/workloopR/articles/Plotting-workloopR.html","id":"working-with-multiple-files","dir":"Articles","previous_headings":"Plotting isometric objects","what":"Working with multiple files","title":"Plotting data in workloopR","text":"can also overlay data multiple isometric trials see force evolves across trials. Please see “Batch processing” vignette details work multiple files.  Please note twitch trials differing values initial force, actual force developments identical peak forces.","code":"multi_twitch_dat<-   system.file(     \"extdata/twitch_csv\",     package = 'workloopR') %>%   list.files(full.names = T) %>%   map(read.csv) %>%   map2(c(\"2mA\",\"3mA\",\"4mA\",\"5mA\"), ~as_muscle_stim(.x, type = 'twitch', file_id = .y))  # Next we want another data.frame of label data multi_label_dat<-   multi_twitch_dat %>%   map_dfr(isometric_timing) %>%   select(file_id, ends_with(\"peak\")) %>%   mutate(label = paste0(round(force_peak),\"mV\"))  # Once again we want the data in a single data.frame with a column for which trial it came from multi_twitch_dat %>%   map_dfr(~mutate(.x, file_id = attr(.x, \"file_id\"))) %>%   ggplot(aes(x = Time, y = Force, colour = file_id)) +   geom_line() +   geom_text(aes(time_peak, force_peak, label = label), hjust=-0.7, data = multi_label_dat) +   labs(y = \"Force (mN)\", x = \"Time (sec)\", colour = \"Stimulation Current\") +   ggtitle(\"Force development across twitch trials\") +   theme_bw() +   theme(legend.position = \"bottom\", legend.direction = \"horizontal\")"},{"path":"https://docs.ropensci.org/workloopR/articles/batch-processing.html","id":"conceptual-overview","dir":"Articles","previous_headings":"","what":"Conceptual overview","title":"Batch processing","text":"generally expect single file store data single experimental trial, whereas directories hold data trials single experiment. Accordingly, muscle_stim objects created used workloopR functions intended hold data single trial workloop related experiment. Lists used package together trials single experiment. also lends using recursion transform analyze data single experiment. broad strokes, three ways batch processing worked workloopR functions. First, functions like *_dir() family import functions summarize_wl_trials() specifically generate require lists muscle_stim objects. Second, first argument functions objects manipulated, can help clean recursion using purrr::map() family functions. Finally, functions return summarized data single rows data.frame can easily bound together generate summary table.","code":""},{"path":"https://docs.ropensci.org/workloopR/articles/batch-processing.html","id":"load-packages-and-data","dir":"Articles","previous_headings":"","what":"Load packages and data","title":"Batch processing","text":"vignette rely heavily purrr::map() family functions recursion, though mentioned base::apply() family functions work well.","code":"library(workloopR) library(magrittr) library(purrr)"},{"path":[]},{"path":"https://docs.ropensci.org/workloopR/articles/batch-processing.html","id":"dir-functions","dir":"Articles","previous_headings":"Necessarily-multi-trial functions","what":"*_dir() functions","title":"Batch processing","text":"read_ddf() read_analyze_wl() alternatives suffixed _dir() read multiple files directory. take path directory optional regular expression filter files return list muscle_stim objects analyzed_workloop objects, respectively. sort_by argument can used rearrange list attribute read-objects. default, objects sorted modification time. arguments read_ddf() read_analyze_wl() can also passed *_dir() alternatives named arguments.","code":"workloop_trials_list<-   system.file(     \"extdata/wl_duration_trials\",     package = 'workloopR') %>%   read_ddf_dir(phase_from_peak = TRUE)  workloop_trials_list[1:2] #> [[1]] #> # Workloop Data: 3 channels recorded over 0.3244s #> File ID: 01_4pulse.ddf #>  #>    Time Position   Force Stim #> 1 1e-04 0.698128 57.2970    0 #> 2 2e-04 0.699741 57.7805    0 #> 3 3e-04 0.699418 58.9095    0 #> 4 4e-04 0.697160 55.8450    0 #> 5 5e-04 0.698773 58.2645    0 #> 6 6e-04 0.698451 57.4580    0 #> # … with 3238 more rows #>  #> [[2]] #> # Workloop Data: 3 channels recorded over 0.3244s #> File ID: 02_2pulse.ddf #>  #>    Time Position   Force Stim #> 1 1e-04 0.698773 47.9420    0 #> 2 2e-04 0.698451 48.1035    0 #> 3 3e-04 0.700064 48.2645    0 #> 4 4e-04 0.698451 48.5875    0 #> 5 5e-04 0.698773 48.7485    0 #> 6 6e-04 0.699418 49.0710    0 #> # … with 3238 more rows analyzed_wl_list<-   system.file(     \"extdata/wl_duration_trials\",     package = 'workloopR') %>%   read_analyze_wl_dir(sort_by = 'file_id',                       phase_from_peak = TRUE,                       cycle_def = 'lo',                       keep_cycles = 3)  analyzed_wl_list[1:2] #> [[1]] #> File ID: 01_4pulse.ddf #> Cycles: 1 cycles kept out of 5 #> Mean Work: 0.00274 J #> Mean Power: 0.07843 W #>  #>  #> [[2]] #> File ID: 02_2pulse.ddf #> Cycles: 1 cycles kept out of 5 #> Mean Work: 0.00098 J #> Mean Power: 0.02783 W"},{"path":"https://docs.ropensci.org/workloopR/articles/batch-processing.html","id":"summarizing-workloop-trials","dir":"Articles","previous_headings":"Necessarily-multi-trial functions","what":"Summarizing workloop trials","title":"Batch processing","text":"series workloop trials, can useful see mean power work change vary different experimental parameters. facilitate , summarize_wl_trials() specifically takes list analyzed_workloop objects returns data.frame information. explore ways generating lists analyzed workloops without using read_analyze_wl_dir() following section.","code":"analyzed_wl_list %>%   summarize_wl_trials #>         File_ID Cycle_Frequency Amplitude  Phase Stimulus_Pulses #> 1 01_4pulse.ddf              28      3.15 -24.36               4 #> 2 02_2pulse.ddf              28      3.15 -24.64               2 #> 3 03_6pulse.ddf              28      3.15 -24.92               6 #> 4 04_4pulse.ddf              28      3.15 -24.64               4 #>   Stimulus_Frequency      mtime     Mean_Work  Mean_Power #> 1                300 1709186061  0.0027387056 0.078427135 #> 2                300 1709186061  0.0009849216 0.027832717 #> 3                300 1709186061 -0.0002192395 0.004323004 #> 4                300 1709186061  0.0022793831 0.065468837"},{"path":[]},{"path":"https://docs.ropensci.org/workloopR/articles/batch-processing.html","id":"batch-import-for-non-ddf-data","dir":"Articles","previous_headings":"Manual recursion examples","what":"Batch import for non-ddf data","title":"Batch processing","text":"One realistic use cases manual recursion importing data multiple related trials stored ddf format. importing individual non-ddf data sources, start reading data data.frame, now want list data.frames. example, read csv files stitch list using purrr::map()","code":"non_ddf_list<-   # Generate a vector of file names   system.file(     \"extdata/twitch_csv\",     package = 'workloopR') %>%   list.files(full.names = T) %>%   # Read into a list of data.frames   map(read.csv) %>%   # Coerce into a workloop object   map(as_muscle_stim, type = \"twitch\")"},{"path":"https://docs.ropensci.org/workloopR/articles/batch-processing.html","id":"data-transformation-and-analysis","dir":"Articles","previous_headings":"Manual recursion examples","what":"Data transformation and analysis","title":"Batch processing","text":"Applying constant transformation list muscle_stim objects fairly straightforward using purrr::map(). Applying non-constant transformation like setting unique file ID can done using purrr::map2(). Analysis can similarly run recursively. isometric_timing() particular returns single row data.frame timings forces key points isometric dataset. can use purrr::map_dfr() bind rows together neatness.","code":"non_ddf_list<-   non_ddf_list %>%   map(~{     attr(.x,\"stimulus_width\")<-0.2     attr(.x,\"stimulus_offset\")<-0.1     return(.x)   }) %>%   map(fix_GR,2) file_ids<-paste0(\"0\",1:4,\"-\",2:5,\"mA-twitch.csv\")  non_ddf_list<-   non_ddf_list %>%   map2(file_ids, ~{     attr(.x,\"file_id\")<-.y     return(.x)   })  non_ddf_list #> [[1]] #> # Twitch Data: 3 channels recorded over 0.4001s #> File ID: 01-2mA-twitch.csv #>  #>    Time  Position   Force Stim #> 1 1e-04 -3.002651 474.262    0 #> 2 2e-04 -3.001682 471.682    0 #> 3 3e-04 -3.001360 472.650    0 #> 4 4e-04 -3.000554 471.037    0 #> 5 5e-04 -3.001199 472.004    0 #> 6 6e-04 -3.001360 472.327    0 #> # … with 3995 more rows #>  #> [[2]] #> # Twitch Data: 3 channels recorded over 0.4001s #> File ID: 02-3mA-twitch.csv #>  #>    Time  Position   Force Stim #> 1 1e-04 -3.002489 476.520    0 #> 2 2e-04 -3.001199 475.553    0 #> 3 3e-04 -3.000876 474.585    0 #> 4 4e-04 -3.001199 473.940    0 #> 5 5e-04 -3.001199 474.262    0 #> 6 6e-04 -3.001360 474.262    0 #> # … with 3995 more rows #>  #> [[3]] #> # Twitch Data: 3 channels recorded over 0.4001s #> File ID: 03-4mA-twitch.csv #>  #>    Time  Position   Force Stim #> 1 1e-04 -3.002651 451.037    0 #> 2 2e-04 -3.001360 449.747    0 #> 3 3e-04 -3.000715 449.747    0 #> 4 4e-04 -3.001037 449.424    0 #> 5 5e-04 -3.000876 449.424    0 #> 6 6e-04 -3.001521 450.069    0 #> # … with 3995 more rows #>  #> [[4]] #> # Twitch Data: 3 channels recorded over 0.4001s #> File ID: 04-5mA-twitch.csv #>  #>    Time  Position   Force Stim #> 1 1e-04 -3.002327 446.521    0 #> 2 2e-04 -3.001521 445.876    0 #> 3 3e-04 -3.001199 445.876    0 #> 4 4e-04 -3.001199 445.876    0 #> 5 5e-04 -3.001360 445.553    0 #> 6 6e-04 -3.001037 446.199    0 #> # … with 3995 more rows non_ddf_list %>%   map_dfr(isometric_timing) #>             file_id time_stim force_stim time_peak force_peak time_rising_10 #> 1 01-2mA-twitch.csv    0.1002    480.391    0.1153    654.258         0.1049 #> 2 02-3mA-twitch.csv    0.1002    461.682    0.1149    748.772         0.1050 #> 3 03-4mA-twitch.csv    0.1002    450.069    0.1145    799.416         0.1049 #> 4 04-5mA-twitch.csv    0.1002    448.134    0.1141    824.899         0.1048 #>   force_rising_10 time_rising_90 force_rising_90 time_relaxing_90 #> 1         497.810         0.1118         637.484           0.1216 #> 2         492.326         0.1109         720.708           0.1207 #> 3         488.778         0.1106         764.901           0.1201 #> 4         488.778         0.1107         787.803           0.1198 #>   force_relaxing_90 time_relaxing_50 force_relaxing_50 #> 1           637.807           0.1348           567.486 #> 2           721.031           0.1325           605.872 #> 3           764.901           0.1314           624.904 #> 4           788.126           0.1311           636.517"},{"path":"https://docs.ropensci.org/workloopR/articles/non-ddf-sources.html","id":"load-packages","dir":"Articles","previous_headings":"","what":"Load packages","title":"Importing data from non .ddf sources","text":"running anything, ’ll ensure packages need.","code":"library(workloopR) library(magrittr) library(ggplot2)"},{"path":"https://docs.ropensci.org/workloopR/articles/non-ddf-sources.html","id":"data","dir":"Articles","previous_headings":"","what":"Data","title":"Importing data from non .ddf sources","text":"somewhat difficult simulate muscle physiology data, ’ll use one workloop files, deconstruct , re-assemble data via as_muscle_stim().","code":"## Load in the work loop example data from workloopR workloop_dat <-   system.file(     \"extdata\",     \"workloop.ddf\",     package = 'workloopR') %>%   read_ddf(phase_from_peak = TRUE) %>%   fix_GR(GR = 2)  ## First we'll extract Time Time <- workloop_dat$Time ## Now Position Position <- workloop_dat$Position ## Force Force <- workloop_dat$Force ## Stimulation Stim <- workloop_dat$Stim  ## Put it all together as a data.frame my_data <- data.frame(Time = Time,                       Position = Position,                       Force = Force,                       Stim = Stim)  head(my_data) #>    Time  Position   Force Stim #> 1 1e-04 0.2519695 609.743    0 #> 2 2e-04 0.2530985 611.033    0 #> 3 3e-04 0.2527760 609.743    0 #> 4 4e-04 0.2530985 608.775    0 #> 5 5e-04 0.2526145 610.388    0 #> 6 6e-04 0.2534210 610.066    0"},{"path":"https://docs.ropensci.org/workloopR/articles/non-ddf-sources.html","id":"assemble-via-as_muscle_stim","dir":"Articles","previous_headings":"","what":"Assemble via as_muscle_stim()","title":"Importing data from non .ddf sources","text":"absolutely crucial columns named “Time”, “Position”, “Force”, “Stim” (case-sensitive). Otherwise, as_muscle_stim() interpret data correctly. minimum, data.frame, type experiment, frequency data recorded (sample_frequency, numeric) necessary as_muscle_stim().","code":"## Put it together my_muscle_stim <- as_muscle_stim(x = my_data,                                  type = \"workloop\",                                  sample_frequency = 10000)  ## Data are stored in columns and basically behave as data.frames head(my_muscle_stim) #> # Workloop Data: 3 channels recorded over 6e-04s #> File ID: NA #>  #>    Time  Position   Force Stim #> 1 0e+00 0.2519695 609.743    0 #> 2 1e-04 0.2530985 611.033    0 #> 3 2e-04 0.2527760 609.743    0 #> 4 3e-04 0.2530985 608.775    0 #> 5 4e-04 0.2526145 610.388    0 #> 6 5e-04 0.2534210 610.066    0  ggplot(my_muscle_stim, aes(x = Time, y = Position)) +   geom_line() +    labs(y = \"Position (mm)\", x = \"Time (secs)\") +   ggtitle(\"Time course of length change\") +   theme_bw()"},{"path":"https://docs.ropensci.org/workloopR/articles/non-ddf-sources.html","id":"attributes","dir":"Articles","previous_headings":"Assemble via as_muscle_stim()","what":"Attributes","title":"Importing data from non .ddf sources","text":"default, couple attributes auto-filled based available information, ’s pretty bare-bones highly encourage add many details possible passing via ... argument. example:","code":"str(attributes(my_muscle_stim)) #> List of 22 #>  $ names             : chr [1:4] \"Time\" \"Position\" \"Force\" \"Stim\" #>  $ row.names         : int [1:3244] 1 2 3 4 5 6 7 8 9 10 ... #>  $ class             : chr [1:3] \"workloop\" \"muscle_stim\" \"data.frame\" #>  $ units             : logi NA #>  $ header            : logi NA #>  $ units_table       : logi NA #>  $ protocol_table    : logi NA #>  $ stim_table        : logi NA #>  $ stimulus_pulses   : logi NA #>  $ stimulus_offset   : logi NA #>  $ stimulus_width    : logi NA #>  $ gear_ratio        : num 1 #>  $ file_id           : logi NA #>  $ mtime             : logi NA #>  $ stimulus_frequency: logi NA #>  $ cycle_frequency   : logi NA #>  $ total_cycles      : logi NA #>  $ cycle_def         : logi NA #>  $ amplitude         : logi NA #>  $ phase             : logi NA #>  $ position_inverted : logi FALSE #>  $ sample_frequency  : num 10000 ## This time, add the file's name via \"file_id\" my_muscle_stim <- as_muscle_stim(x = my_data,                                  type = \"workloop\",                                  sample_frequency = 10000,                                  file_id = \"workloop123\")  ## For simplicity, we'll just target the file_id attribute directly instead of  ## printing all attributes again attr(my_muscle_stim, \"file_id\") #> [1] \"workloop123\""},{"path":"https://docs.ropensci.org/workloopR/articles/non-ddf-sources.html","id":"possible-attributes","dir":"Articles","previous_headings":"Assemble via as_muscle_stim()","what":"Possible attributes","title":"Importing data from non .ddf sources","text":"list possible attributes can filled. see formatted, (e.g. ones take numeric values vs. character vectors…etc)","code":"names(attributes(workloop_dat)) #>  [1] \"names\"              \"row.names\"          \"stimulus_frequency\" #>  [4] \"cycle_frequency\"    \"total_cycles\"       \"cycle_def\"          #>  [7] \"amplitude\"          \"phase\"              \"position_inverted\"  #> [10] \"units\"              \"sample_frequency\"   \"header\"             #> [13] \"units_table\"        \"protocol_table\"     \"stim_table\"         #> [16] \"stimulus_pulses\"    \"stimulus_offset\"    \"stimulus_width\"     #> [19] \"gear_ratio\"         \"file_id\"            \"mtime\"              #> [22] \"class\" str(attributes(workloop_dat)) #> List of 22 #>  $ names             : chr [1:4] \"Time\" \"Position\" \"Force\" \"Stim\" #>  $ row.names         : int [1:3244] 1 2 3 4 5 6 7 8 9 10 ... #>  $ stimulus_frequency: int 300 #>  $ cycle_frequency   : int 28 #>  $ total_cycles      : int 6 #>  $ cycle_def         : chr \"lo\" #>  $ amplitude         : num 1.57 #>  $ phase             : num -24.9 #>  $ position_inverted : logi FALSE #>  $ units             : chr [1:4] \"s\" \"mm\" \"mN\" \"TTL\" #>  $ sample_frequency  : num 10000 #>  $ header            : chr [1:4] \"Sample Frequency (Hz): 10000\" \"Reference Area: NaN sq. mm\" \"Reference Force: NaN mN\" \"Reference Length: NaN mm\" #>  $ units_table       :'data.frame':  10 obs. of  5 variables: #>   ..$ Channel: chr [1:10] \"AI0\" \"AI1\" \"AI2\" \"AI3\" ... #>   ..$ Units  : chr [1:10] \"mm\" \"mN\" \"TTL\" \"\" ... #>   ..$ Scale  : num [1:10] 1 500 0.2 0 0 0 0 0 1 500 #>   ..$ Offset : num [1:10] 0 0 0 0 0 0 0 0 0 0 #>   ..$ TADs   : num [1:10] 0 0 0 0 0 0 0 0 0 0 #>  $ protocol_table    :'data.frame':  4 obs. of  5 variables: #>   ..$ Wait.s     : num [1:4] 0 0.01 0 0.1 #>   ..$ Then.action: chr [1:4] \"Stimulus-Train\" \"Sine Wave\" \"Stimulus-Train\" \"Stop\" #>   ..$ On.port    : chr [1:4] \"Stimulator\" \"Length Out\" \"Stimulator\" \"\" #>   ..$ Units      : chr [1:4] \".012, 300, 0.2, 4, 28\" \"28,3.15,6\" \"0,0,0,0,0\" \"\" #>   ..$ Parameters : logi [1:4] NA NA NA NA #>  $ stim_table        :'data.frame':  2 obs. of  5 variables: #>   ..$ offset         : num [1:2] 0.012 0 #>   ..$ frequency      : int [1:2] 300 0 #>   ..$ width          : num [1:2] 0.2 0 #>   ..$ pulses         : int [1:2] 4 0 #>   ..$ cycle_frequency: int [1:2] 28 0 #>  $ stimulus_pulses   : int 4 #>  $ stimulus_offset   : num 0.012 #>  $ stimulus_width    : num 0.2 #>  $ gear_ratio        : num 2 #>  $ file_id           : chr \"workloop.ddf\" #>  $ mtime             : POSIXct[1:1], format: \"2024-02-29 05:54:21\" #>  $ class             : chr [1:3] \"workloop\" \"muscle_stim\" \"data.frame\""},{"path":"https://docs.ropensci.org/workloopR/articles/non-ddf-sources.html","id":"thanks-for-reading","dir":"Articles","previous_headings":"","what":"Thanks for reading!","title":"Importing data from non .ddf sources","text":"Please feel free contact either Vikram Shree suggestions code development requests. especially interested expanding data import functions accommodate file types .ddf future versions workloopR.","code":""},{"path":"https://docs.ropensci.org/workloopR/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Vikram B. Baliga. Author, maintainer. Shreeram Senthivasan. Author. Julia Romanowska. Reviewer.            Julia reviewed package rOpenSci              , see <https://github.com/ropensci/software-review/issues/326/> Eric Brown. Reviewer.            Eric reviewed package rOpenSci              , see <https://github.com/ropensci/software-review/issues/326/>","code":""},{"path":"https://docs.ropensci.org/workloopR/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Baliga V, Senthivasan S (2019). “workloopR: Analysis work loops data muscle physiology experiments R.” Journal Open Source Software, 4(43), 1856. doi:10.21105/joss.01856.","code":"@Article{,   title = {workloopR: Analysis of work loops and other data from muscle physiology experiments in R},   author = {Vikram B. Baliga and Shreeram Senthivasan},   journal = {Journal of Open Source Software},   year = {2019},   volume = {4(43)},   pages = {1856},   doi = {10.21105/joss.01856}, }"},{"path":"https://docs.ropensci.org/workloopR/index.html","id":"workloopr-analysis-of-work-loops-and-other-data-from-muscle-physiology-experiments-in-r-","dir":"","previous_headings":"","what":"Analysis of Work Loops and Other Data from Muscle Physiology Experiments","title":"Analysis of Work Loops and Other Data from Muscle Physiology Experiments","text":"Documentation website: https://docs.ropensci.org/workloopR/ Accompanying paper Journal Open Source Software: https://doi.org/10.21105/joss.01856","code":""},{"path":"https://docs.ropensci.org/workloopR/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Analysis of Work Loops and Other Data from Muscle Physiology Experiments","text":"can install workloopR CRAN via: {r install_cran, eval = FALSE} install.packages(\"workloopR\") get latest (developmental) version GitHub, use: Please note vignettes built default. build vignettes well, please use following code:","code":"#install.packages(\"devtools\") # if devtools is not installed devtools::install_github(\"ropensci/workloopR\") devtools::install_github(\"ropensci/workloopR\", build_vignettes = TRUE)"},{"path":"https://docs.ropensci.org/workloopR/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Analysis of Work Loops and Other Data from Muscle Physiology Experiments","text":"workloopR (pronounced “work looper”) provides functions import, transformation, analysis muscle physiology experiments R. package’s title suggests, initial motivation provide functions analyze work loops. work loop technique (Josephson 1985) used studies muscle physiology determine mechanical work power output muscle. course developing package, expanded goal also cover experiments often complementary work loop technique. three currently supported experiment types: work loop, simple twitch, tetanus. Figure 1 work loops, recommend great review paper Ahn (2012) well Wikipedia page.","code":""},{"path":"https://docs.ropensci.org/workloopR/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Analysis of Work Loops and Other Data from Muscle Physiology Experiments","text":"workloopR offers ability import, transform, analyze data file. example using work loop file included within package:","code":"library(workloopR)  ## import the workloop.ddf file included in workloopR wl_dat <- read_ddf(system.file(\"extdata\", \"workloop.ddf\",                                package = 'workloopR'),                   phase_from_peak = TRUE)  ## select cycles 3 through 5 using a peak-to-peak definition wl_selected <- select_cycles(wl_dat, cycle_def = \"p2p\", keep_cycles = 3:5)  ## apply a gear ratio correction, run the analysis function, ## and then get the full object wl_analyzed <- analyze_workloop(wl_selected, GR = 2) ## for brevity, the print() method for this object produces a simple output wl_analyzed File ID: workloop.ddf Cycles: 3 cycles kept out of 6 Mean Work: 0.00308 J Mean Power: 0.08474 W ## but see the structure for the full output, e.g. #str(wl_analyzed)  ## or run the analysis but get the simplified version wl_analyzed_simple <- analyze_workloop(wl_selected, simplify = TRUE, GR = 2) wl_analyzed_simple Cycle        Work  Net_Power a     A 0.002785397 0.07639783 b     B 0.003147250 0.08661014 c     C 0.003305744 0.09122522"},{"path":"https://docs.ropensci.org/workloopR/index.html","id":"core-features-and-recommended-vignettes","dir":"","previous_headings":"","what":"Core features and recommended vignettes","title":"Analysis of Work Loops and Other Data from Muscle Physiology Experiments","text":"overview, please also see “Introduction workloopR” vignette Data import: Importing data creates objects class muscle_stim, designed essentially behave data.frames unique properties work nicely workloopR’s core functions. Data stored .ddf format (e.g., generated Aurora Scientific’s Dynamic Muscle Control Analysis Software) easily imported. file formats welcome, need constructed muscle_stim objects user; please see vignette “Importing data non .ddf sources”. Example: Data transformations & corrections: Prior analyses, data can transformed corrected. data recorded incorrectly, gear ratio motor arm /direction muscle’s length change can adjusted. analyzing work loop data, cycles within work loop can labeled (according various definitions constitutes “cycle”), allows calculation metrics per-cycle basis. Example: Analyses: Core data analytical functions include analyze_workloop() work loop files isometric_timing() twitch tetanus trials. analyze_workloop() computes instantaneous velocity, net work, instantaneous power, net power work loop trials per-cycle basis. See “Analyzing work loop experiments workloopR” vignette. isometric_timing() provides summarization kinetics, .e. timing magnitude force production various points within tetanus twitch trial. See “Working isometric experiments workloopR” vignette. Example: Batch processing: also include functions batch processing files (e.g., multiple files common experiment). functions allow import, cycle selection, gear ratio correction, ultimately work & power computation work loop trial files within specified directory. also allows users correct potential degradation muscle (according power & work output) course experiment. See “Batch processing” vignette Example: Plotting: Although provide plotting functions, resultant objects designed friendly visualization via either base-R plotting tidyverse functions. Please see “Plotting data workloopR” vignette.","code":"## import the workloop.ddf file included in workloopR wl_dat <- read_ddf(system.file(\"extdata\", \"workloop.ddf\",                                package = 'workloopR'),                   phase_from_peak = TRUE)  ## see how the muscle_stim object is organized wl_dat str(wl_dat) names(attributes(wl_dat)) ## correct the gear ratio of the motor arm ## we'll use gear ratio = 2 ## this multiples Force by 2 and divides Position by 2 wl_fixed <- fix_GR(wl_dat, GR = 2) ## import the twitch.ddf file included in workloopR twitch_dat <- read_ddf(system.file(\"extdata\", \"twitch.ddf\",                                    package = 'workloopR'))  ## run isometric_timing() to get info on twitch kinetics ## we'll use different set points than the defaults analyze_twitch <- isometric_timing(twitch_dat,                                    rising = c(25, 50, 75),                                    relaxing = c(75, 50, 25)) ## batch read and analyze files included with workloopR analyzed_wls <- read_analyze_wl_dir(system.file(\"extdata/wl_duration_trials\",                                                 package = 'workloopR'),                                     phase_from_peak = TRUE,                                     cycle_def = \"p2p\", keep_cycles = 2:4,                                     GR = 2)"},{"path":"https://docs.ropensci.org/workloopR/index.html","id":"graphical-overview","dir":"","previous_headings":"","what":"Graphical overview","title":"Analysis of Work Loops and Other Data from Muscle Physiology Experiments","text":"Recommended functions vignettes: Figure 2","code":""},{"path":"https://docs.ropensci.org/workloopR/index.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Analysis of Work Loops and Other Data from Muscle Physiology Experiments","text":"preferred way cite workloopR : Baliga VB Senthivasan S. 2019. workloopR: Analysis work loops data muscle physiology experiments R. Journal Open Source Software, 4(43), 1856, https://doi.org/10.21105/joss.01856","code":""},{"path":"https://docs.ropensci.org/workloopR/index.html","id":"issuesquestionsrequests","dir":"","previous_headings":"","what":"Issues/questions/requests","title":"Analysis of Work Loops and Other Data from Muscle Physiology Experiments","text":"Feedback welcome! Please feel free get touch either Vikram (@vbaliga) Shree (@shreeramsenthi). happy take feature requests, especially involve data import non-ddf file types. Please see Issues page templates can use. 🐢","code":""},{"path":"https://docs.ropensci.org/workloopR/index.html","id":"license","dir":"","previous_headings":"","what":"License","title":"Analysis of Work Loops and Other Data from Muscle Physiology Experiments","text":"GPL (>= 3) + file LICENSE","code":""},{"path":"https://docs.ropensci.org/workloopR/paper.html","id":null,"dir":"","previous_headings":"","what":"Summary","title":"Summary","text":"work loop technique [@Josephson:1985] used studies muscle physiology determine mechanical work power output muscle. isolating attaching muscle interest servo motor, motor induces cyclical oscillations length change muscle. example length change trace shown Figure  (blue; one cycle several). occurs, muscle stimulated (grey shading) either directly via supplying nerve force generated recorded (red trace). mechanical work product force distance, plotting force length change particular cycle yields “work loop”. Work generated muscle’s shortening phase considered positive work, whereas work lengthening negative. Accordingly, area enclosed within work loop net work produced cycle. example work loop analysis pipeline. (Left) Raw traces shown one length change cycle blue. Stimulation shown grey shading muscle force generation shown red. (Right) Net work calculated difference work (Middle) shortening lengthening phases. Work loop procedures powerful experimental value used understand characteristics whole muscles, fiber bundles, /single muscle fibers wide variety organisms. Using experimental parameters (e.g., length change amplitude, frequency stimulation) correspond shown organism vivo can help explain muscle performance context natural behavior. since experimental parameters need constrained shown vivo behaviors, work loop technique affords ability explore muscle’s properties beyond () natural physiological constraints. @Ahn:2012 provides review work loop technique’s importance field muscle physiology. ability import analyze data work loop (muscle physiology ) experiments conspicuously absent open-source environments. workloopR (pronounced “work looper”) provides functions import, transformation, analysis muscle physiology experiments R. package’s title suggests, initial motivation provide functions analyze work loops determine net work power output time-course length force change. course developing package, expanded goal cover additional types experiments often complementary work loop technique. Accordingly, three currently supported experiment types: work loop, simple twitch, tetanus. Importing data via functions within package creates objects class muscle_stim, designed essentially behave data.frames unique properties work nicely workloopR’s core functions. Several functions designed parse information stored .ddf format (e.g., generated Aurora Scientific’s Dynamic Muscle Control Analysis Software). Time-course data muscle length change, force development, stimulation pattern imported muscle_stim object important metadata protocol information (e.g., specifics stimulus train) stored object’s attributes. File formats .ddf welcome, need coerced muscle_stim objects user using as_muscle_stim() function. Prior analysis, data can transformed corrected. metadata recorded incorrectly, gear ratio motor arm /direction muscle’s length change can adjusted. analyzing work loop data, cycles within work loop can labeled (according various definitions constitutes “cycle”), allows calculation metrics per-cycle basis. Core data analytical functions include analyze_workloop() work loop files isometric_timing() twitch tetanus trials. analyze_workloop() computes instantaneous velocity, net work, instantaneous power, net power work loop trials per-cycle basis. isometric_timing() provides summarization kinetics, .e. timing magnitude force production various points within tetanus twitch trial. also include functions batch processing files (e.g., multiple files common experiment). functions allow import, cycle selection, gear ratio correction, ultimately work & power computation work loop trial files within specified directory. batch analytical pipeline also allows users correct potential degradation muscle (according power & work output) course experiment. Although provide plotting functions, muscle_stim data.frame objects produced analytical functions designed friendly visualization via either base-R plotting tidyverse functions. Please see Figure  overview workloopR package recommended functions vignettes. Flow chart suggested analysis pipeline various work loop isometric studies.","code":""},{"path":"https://docs.ropensci.org/workloopR/paper.html","id":"acknowledgements","dir":"","previous_headings":"","what":"Acknowledgements","title":"Summary","text":"thank Doug Altshuler, Jasmin Wong, Jolan Theriault help provided throughout course project. work funded U.S. Air Force Office Scientific Research (grant . FA9550-16-1-0182, titled “Avian-inspired multifunctional morphing vehicles” monitored B. L. Lee) also Natural Sciences Engineering Research Council Canada (NSERC, RGPIN-2016-05381).","code":""},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":"https://docs.ropensci.org/workloopR/reference/analyze_workloop.html","id":null,"dir":"Reference","previous_headings":"","what":"Analyze work loop object to compute work and power output — analyze_workloop","title":"Analyze work loop object to compute work and power output — analyze_workloop","text":"Compute work power output work loop experiment per-cycle basis.","code":""},{"path":"https://docs.ropensci.org/workloopR/reference/analyze_workloop.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Analyze work loop object to compute work and power output — analyze_workloop","text":"","code":"analyze_workloop(x, simplify = FALSE, GR = 1, M = -1, vel_bf = 0.05, ...)"},{"path":"https://docs.ropensci.org/workloopR/reference/analyze_workloop.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Analyze work loop object to compute work and power output — analyze_workloop","text":"x workloop object class muscle_stim passed select_cycles. See Details. simplify Logical. FALSE, full analyzed workloop object returned. TRUE simpler table net work power (cycle) returned. GR Gear ratio, set 1 default M Velocity multiplier, set adjust sign velocity. parameter generally either -1 (default) 1. vel_bf Critical frequency (scalar) low-pass filtering velocity via signal::butter() ... Additional arguments potentially passed read_analyze_wl() read_analyze_wl_dir()","code":""},{"path":"https://docs.ropensci.org/workloopR/reference/analyze_workloop.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Analyze work loop object to compute work and power output — analyze_workloop","text":"function returns list class analyzed_workloop provides instantaneous velocity, smoothed velocity, computes work,  instantaneous power, net power work loop experiment. data  organized cycle number important metadata stored  Attributes. Within list, entry labeled cycle includes: Time Time, sec Position Length change muscle, corrected gear ratio, mm Force Force, corrected gear ratio, mN Stim stimulation occurs, binary scale Cycle Cycle ID, letter Inst_velocity Instantaneous velocity, computed Position change, reported meters/sec Filt_velocity Instantaneous velocity, low-pass filtering,  meter/sec Inst_Power Instantaneous power, product Force Filt_velocity, reported J Percent_of_Cycle percent particular cycle elapsed addition, following information stored analyzed_workloop object's attributes: stimulus_frequency Frequency stimulus pulses occurred cycle_frequency Frequency oscillations (assuming sine wave trajectory) total_cycles Total number oscillatory cycles (assuming sine wave trajectory) muscle experienced. cycle_def Specifies part cycle understood beginning end. currently three options: 'lo' L0--L0; 'p2p' peak--peak; 't2t' trough--trough amplitude Amplitude length change (assuming sine wave trajectory) phase Phase oscillatory cycle (percent) stimulation occurred. Somewhat experimental, please use caution position_inverted Logical; whether position inversion applied) units units measurement column object running function. See Warning sample_frequency Frequency samples collected header Additional information header units_table Units Channel original ddf file protocol_table Protocol tabular format; taken original ddf file stim_table Specific info stimulus protocol; taken original ddf file stimulus_pulses Number sequential pulses within stimulation train stimulus_offset Timing offset stimulus began gear_ratio Gear ratio applied function file_id File name mtime Time file last modified retained_cycles cycles retained, numerics summary Simple table showing work (J) net power (W)  cycle","code":""},{"path":"https://docs.ropensci.org/workloopR/reference/analyze_workloop.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Analyze work loop object to compute work and power output — analyze_workloop","text":"Please note select_cycles() must run data prior using function. function relies input muscle_stim object organized cycle number. muscle_stim object (x) must workloop, preferably read one data import functions. Please see documentation as_muscle_stim() need manually construct muscle_stim object non .ddf source. gear ratio (GR) velocity multiplier (M) parameters can help correct issues related magnitude sign data collection. default, set apply gear ratio adjustment positivize velocity. Instantaneous velocity often noisy vel_bf parameter allows low-pass filtering velocity data. See signal::butter() signal::filtfilt() details filtering achieved. Please also careful units! Se Warning section .","code":""},{"path":"https://docs.ropensci.org/workloopR/reference/analyze_workloop.html","id":"warning","dir":"Reference","previous_headings":"","what":"Warning","title":"Analyze work loop object to compute work and power output — analyze_workloop","text":"systems encountered record Position data millimeters Force millinewtons, therefore function assumes data recorded units. series internal conversions, function computes velocity meters/sec, work Joules, power Watts. raw data originate millimeters millinewtons, please transform data accordingly ignore see attribute units.","code":""},{"path":"https://docs.ropensci.org/workloopR/reference/analyze_workloop.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Analyze work loop object to compute work and power output — analyze_workloop","text":"Josephson RK. 1985. Mechanical Power output Striated Muscle  Cyclic Contraction. Journal Experimental Biology 114: 493-512.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/workloopR/reference/analyze_workloop.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Analyze work loop object to compute work and power output — analyze_workloop","text":"Vikram B. Baliga Shreeram Senthivasan","code":""},{"path":"https://docs.ropensci.org/workloopR/reference/analyze_workloop.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Analyze work loop object to compute work and power output — analyze_workloop","text":"","code":"library(workloopR)  # import the workloop.ddf file included in workloopR wl_dat <-read_ddf(system.file(\"extdata\", \"workloop.ddf\",                               package = 'workloopR'),                   phase_from_peak = TRUE)  # select cycles 3 through 5 via the peak-to-peak definition wl_selected <- select_cycles(wl_dat, cycle_def = \"p2p\", keep_cycles = 3:5)  # run the analysis function and get the full object wl_analyzed <- analyze_workloop(wl_selected, GR = 2)  # print methods give a short summary print(wl_analyzed) #> File ID: workloop.ddf #> Cycles: 3 cycles kept out of 6 #> Mean Work: 0.00308 J #> Mean Power: 0.08474 W #>   # summary provides a bit more detail summary(wl_analyzed) #> # Workloop Data: #>  #>  #> File ID: workloop.ddf #> Mod Time (mtime): 2024-02-29 05:54:21.341738 #> Sample Frequency: 10000Hz #>  #> data.frame Columns:  #>   Position (mm) #>   Force (mN) #>   Stim (TTL) #>   Cycle (letters) #>   Inst_Velocity (m/s) #>   Filt_Velocity (m/s) #>   Inst_Power (W) #>   Percent_of_Cycle (NA) #>  #> Stimulus Offset: 0.012s #> Stimulus Frequency: 300Hz #> Stimulus Width: 0.2ms #> Stimulus Pulses: 4 #> Gear Ratio: 2 #>  #> Cycle Frequency: 28Hz #> Total Cycles (peak-to-peak): 6 #> Cycles Retained: 3 #> Amplitude: 1.575mm #>  #>  #>   Cycle        Work  Net_Power #> a     A 0.002785397 0.07639783 #> b     B 0.003147250 0.08661014 #> c     C 0.003305744 0.09122522  # run the analysis but get the simplified version wl_analyzed_simple <- analyze_workloop(wl_selected, simplify = TRUE, GR = 2)"},{"path":"https://docs.ropensci.org/workloopR/reference/as_muscle_stim.html","id":null,"dir":"Reference","previous_headings":"","what":"Create your own muscle_stim object — as_muscle_stim","title":"Create your own muscle_stim object — as_muscle_stim","text":"use data stored .ddf format like create muscle_stim object can used workloopR functions.","code":""},{"path":"https://docs.ropensci.org/workloopR/reference/as_muscle_stim.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create your own muscle_stim object — as_muscle_stim","text":"","code":"as_muscle_stim(x, type, sample_frequency, ...)"},{"path":"https://docs.ropensci.org/workloopR/reference/as_muscle_stim.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create your own muscle_stim object — as_muscle_stim","text":"x data.frame. See Details organized. type Experiment type; must one : \"workloop\", \"tetanus\", \"twitch.\" sample_frequency Numeric value frequency samples recorded; must Hz. Please format numeric, e.g. 10000 works 10000 Hz ... Additional arguments can passed attributes. See Details.","code":""},{"path":"https://docs.ropensci.org/workloopR/reference/as_muscle_stim.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create your own muscle_stim object — as_muscle_stim","text":"object class workloop, twitch, tetanus, inherit class muscle_stim. objects behave like data.frames situations also store metadata ddf attributes. muscle_stim object's columns contain: Time Time Position Length change muscle, uncorrected gear ratio Force Force, uncorrected gear ratio Stim stimulation occurs, binary scale addition, following information stored data.frame's attributes: sample_frequency Frequency samples collected pulses Number sequential pulses within stimulation train total_cycles_lo Total number oscillatory cycles (assuming sine wave trajectory) muscle experienced. Cycles defined respect initial muscle length (L0--L0 opposed peak--peak). amplitude amplitude length change (, assuming sine wave trajectory) cycle_frequency Frequency oscillations (, assuming sine wave trajectory) units units measurement column data.frame. might important attribute please check  makes sense!","code":""},{"path":"https://docs.ropensci.org/workloopR/reference/as_muscle_stim.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create your own muscle_stim object — as_muscle_stim","text":"muscle_stim objects, required (nearly) workloopR functions, automatically created via read_ddf(). data stored format .ddf, use function create object class muscle_stim. input x must data.frame contains time series numeric data collected experiment. row must correspond sample, columns (exact title matches) must included:  \"Time\" - time, recorded seconds  \"Position\" - instantaneous position muscle,   preferably millimeters  \"Force\" - force, preferably millinewtons  \"Stim\" - whether stimulation occurred. entries must either 0 (stimulus) 1 (stimulus occurrence). Additional arguments can provided via .... experiment types, following attributes appropriate:  \"units\",\"header\", \"units_table\", \"protocol_table\", \"stim_table\", \"stimulus_pulses\", \"stimulus_offset\", \"stimulus_width\", \"gear_ratio\", \"file_id\", \"mtime\". Please ensure attributes appropriate experiment type. workloops, include: \"stimulus_frequency\", \"cycle_frequency\", \"total_cycles\", \"cycle_def\", \"amplitude\", \"phase\", \"position_inverted\" twitches tetanic trials: \"stimulus_frequency\", \"stimulus_length\"","code":""},{"path":[]},{"path":"https://docs.ropensci.org/workloopR/reference/as_muscle_stim.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Create your own muscle_stim object — as_muscle_stim","text":"Shreeram Senthivasan","code":""},{"path":"https://docs.ropensci.org/workloopR/reference/as_muscle_stim.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create your own muscle_stim object — as_muscle_stim","text":"","code":"library(workloopR)  # import the workloop.ddf file included in workloopR wl_dat <-read_ddf(system.file(\"extdata\", \"workloop.ddf\",                               package = 'workloopR'))"},{"path":"https://docs.ropensci.org/workloopR/reference/fix_GR.html","id":null,"dir":"Reference","previous_headings":"","what":"Adjust for the gear ratio of a motor arm — fix_GR","title":"Adjust for the gear ratio of a motor arm — fix_GR","text":"Fix discrepancy gear ratio motor arm used gear ratio recorded software.","code":""},{"path":"https://docs.ropensci.org/workloopR/reference/fix_GR.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Adjust for the gear ratio of a motor arm — fix_GR","text":"","code":"fix_GR(x, GR = 1)"},{"path":"https://docs.ropensci.org/workloopR/reference/fix_GR.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Adjust for the gear ratio of a motor arm — fix_GR","text":"x muscle_stim object GR Gear ratio, set 1 default","code":""},{"path":"https://docs.ropensci.org/workloopR/reference/fix_GR.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Adjust for the gear ratio of a motor arm — fix_GR","text":"object class(es) input (x). function  multiply Position (1/GR) multiply Force GR,  returning object new values $Position $Force.  columns attributes welcome simply passed  unchanged resulting object.","code":""},{"path":"https://docs.ropensci.org/workloopR/reference/fix_GR.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Adjust for the gear ratio of a motor arm — fix_GR","text":"muscle_stim object can type, including workloop, twitch, tetanus. manually constructed object via as_muscle_stim(), muscle_stim object columns follows: Position: length change muscle; Force: force","code":""},{"path":[]},{"path":"https://docs.ropensci.org/workloopR/reference/fix_GR.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Adjust for the gear ratio of a motor arm — fix_GR","text":"Vikram B. Baliga","code":""},{"path":"https://docs.ropensci.org/workloopR/reference/fix_GR.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Adjust for the gear ratio of a motor arm — fix_GR","text":"","code":"library(workloopR)  # import the workloop.ddf file included in workloopR wl_dat <-read_ddf(system.file(\"extdata\", \"workloop.ddf\",                               package = 'workloopR'),                   phase_from_peak = TRUE)  # apply a gear ratio correction of 2 # this will multiply Force by 2 and divide Position by 2 wl_fixed <- fix_GR(wl_dat, GR = 2)  # quick check: max(wl_fixed$Force) / max(wl_dat$Force) # 5592.578 / 2796.289 = 2 #> [1] 2 max(wl_fixed$Position) / max(wl_dat$Position) # 1.832262 / 3.664524 = 0.5 #> [1] 0.5"},{"path":"https://docs.ropensci.org/workloopR/reference/get_wl_metadata.html","id":null,"dir":"Reference","previous_headings":"","what":"Get file info for a sequence of experiment files — get_wl_metadata","title":"Get file info for a sequence of experiment files — get_wl_metadata","text":"Grab metadata files stored folder (e.g. sequence trials  experiment).","code":""},{"path":"https://docs.ropensci.org/workloopR/reference/get_wl_metadata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get file info for a sequence of experiment files — get_wl_metadata","text":"","code":"get_wl_metadata(file_path, pattern = \"*.ddf\")"},{"path":"https://docs.ropensci.org/workloopR/reference/get_wl_metadata.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get file info for a sequence of experiment files — get_wl_metadata","text":"file_path Path files stored. folder. pattern Regex pattern identifying relevant files file_path.","code":""},{"path":"https://docs.ropensci.org/workloopR/reference/get_wl_metadata.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get file info for a sequence of experiment files — get_wl_metadata","text":"Either data.frame (single file supplied) list data.frames (list files supplied), information supplied file.info().","code":""},{"path":"https://docs.ropensci.org/workloopR/reference/get_wl_metadata.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get file info for a sequence of experiment files — get_wl_metadata","text":"several files (e.g. successive trials one experiment) stored one folder, use function obtain metadata list format. Runs file.info() base R extract info files. function truly considered part batch analysis pipeline; see read_analyze_wl_dir() similar function grabs metadata also imports & analyzes files. Instead, get_wl_metadata() meant handy function investigate metadata issues arise running read_analyze_wl_dir() goes awry. Unlike read_analyze_wl_dir(), function necessarily need files work loops. file type welcome (long Regex pattern argument makes sense).","code":""},{"path":[]},{"path":"https://docs.ropensci.org/workloopR/reference/get_wl_metadata.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Get file info for a sequence of experiment files — get_wl_metadata","text":"Vikram B. Baliga","code":""},{"path":"https://docs.ropensci.org/workloopR/reference/get_wl_metadata.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get file info for a sequence of experiment files — get_wl_metadata","text":"","code":"library(workloopR)  # get file info for files included with workloopR wl_meta <- get_wl_metadata(system.file(\"extdata/wl_duration_trials\",                                        package = 'workloopR'))"},{"path":"https://docs.ropensci.org/workloopR/reference/invert_position.html","id":null,"dir":"Reference","previous_headings":"","what":"Invert the position data — invert_position","title":"Invert the position data — invert_position","text":"Multiply instantaneous position -1.","code":""},{"path":"https://docs.ropensci.org/workloopR/reference/invert_position.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Invert the position data — invert_position","text":"","code":"invert_position(x)"},{"path":"https://docs.ropensci.org/workloopR/reference/invert_position.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Invert the position data — invert_position","text":"x muscle_stim object","code":""},{"path":"https://docs.ropensci.org/workloopR/reference/invert_position.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Invert the position data — invert_position","text":"workloop object inverted position. position_inverted attribute set TRUE others retained.","code":""},{"path":"https://docs.ropensci.org/workloopR/reference/invert_position.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Invert the position data — invert_position","text":"muscle_stim object can type, including workloop, twitch, tetanus. manually constructed object via as_muscle_stim(), muscle_stim object column entitled Position. columns attributes welcome passed along unchanged.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/workloopR/reference/invert_position.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Invert the position data — invert_position","text":"Vikram B. Baliga","code":""},{"path":"https://docs.ropensci.org/workloopR/reference/invert_position.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Invert the position data — invert_position","text":"","code":"library(workloopR)  # import the workloop.ddf file included in workloopR wl_dat <-read_ddf(system.file(\"extdata\", \"workloop.ddf\",                               package = 'workloopR'),                   phase_from_peak = TRUE)  # invert the sign of Position wl_fixed <- invert_position(wl_dat)  # quick check: max(wl_fixed$Position) / min(wl_dat$Position) # -1 #> [1] -1"},{"path":"https://docs.ropensci.org/workloopR/reference/isometric_timing.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute timing and magnitude of force in isometric trials — isometric_timing","title":"Compute timing and magnitude of force in isometric trials — isometric_timing","text":"Calculate timing magnitude force stimulation, peak force, various parts rising (force development) relaxation (falling) phases twitch.","code":""},{"path":"https://docs.ropensci.org/workloopR/reference/isometric_timing.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute timing and magnitude of force in isometric trials — isometric_timing","text":"","code":"isometric_timing(x, rising = c(10, 90), relaxing = c(90, 50))"},{"path":"https://docs.ropensci.org/workloopR/reference/isometric_timing.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute timing and magnitude of force in isometric trials — isometric_timing","text":"x muscle_stim object contains data isometric twitch trial, ideally created via read_ddf. rising Set points rising phase described. default: 10% 90%. relaxing Set points relaxation phase described. default: 90% 50%.","code":""},{"path":"https://docs.ropensci.org/workloopR/reference/isometric_timing.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute timing and magnitude of force in isometric trials — isometric_timing","text":"data.frame following metrics columns: file_ID File ID time_stim Time beginning data collection stimulation occurs force_stim Magnitude force onset stimulation time_peak Absolute time peak force, .e. time beginning data collection peak force occurs force_peak Magnitude peak force time_rising_X Time beginning data collection X%  force development force_rising_X Magnitude force X% force development time_relaxing_X Time beginning data collection X%  force relaxation force_relaxing_X Magnitude force X% relaxation","code":""},{"path":"https://docs.ropensci.org/workloopR/reference/isometric_timing.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute timing and magnitude of force in isometric trials — isometric_timing","text":"data.frame (x) must time series data organized columns. Generally, preferred use muscle_stim object imported read_ddf(). rising relaxing arguments allow user supply numeric vectors length. default, arguments rising = c(10, 90) relaxing  = c(90, 50). Numbers correspond percent values capture time force percent corresponding curve. values can replaced user specifies necessarily need length = 2. please note 0 100 used, e.g. rising = seq(10, 90, 5) works, rising = seq(0, 100, 5) .","code":""},{"path":"https://docs.ropensci.org/workloopR/reference/isometric_timing.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Compute timing and magnitude of force in isometric trials — isometric_timing","text":"Ahn , Full RJ. 2002. motor brake: two leg extensor muscles acting joint manage energy differently running insect. Journal Experimental Biology 205, 379-389.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/workloopR/reference/isometric_timing.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Compute timing and magnitude of force in isometric trials — isometric_timing","text":"Vikram B. Baliga","code":""},{"path":"https://docs.ropensci.org/workloopR/reference/isometric_timing.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute timing and magnitude of force in isometric trials — isometric_timing","text":"","code":"library(workloopR)  # import the twitch.ddf file included in workloopR twitch_dat <-read_ddf(system.file(\"extdata\", \"twitch.ddf\",                                   package = 'workloopR'))  # run isometric_timing() to get info on twitch kinetics # we'll use different set points than the defaults analyze_twitch <- isometric_timing(twitch_dat,   rising = c(25, 50, 75),   relaxing = c(75, 50, 25) )  # see the results analyze_twitch #>      file_id time_stim force_stim time_peak force_peak time_rising_25 #> 1 twitch.ddf    0.1002    224.067    0.1141   412.4495         0.1057 #>   force_rising_25 time_rising_50 force_rising_50 time_rising_75 force_rising_75 #> 1         273.743          0.107             321         0.1087        366.1605 #>   time_relaxing_75 force_relaxing_75 time_relaxing_50 force_relaxing_50 #> 1           0.1241          365.5155           0.1311          318.2585 #>   time_relaxing_25 force_relaxing_25 #> 1            0.143           271.808"},{"path":"https://docs.ropensci.org/workloopR/reference/read_analyze_wl.html","id":null,"dir":"Reference","previous_headings":"","what":"All-in-one import function for work loop files — read_analyze_wl","title":"All-in-one import function for work loop files — read_analyze_wl","text":"read_analyze_wl() --one function read work loop file, select cycles, compute work power output.","code":""},{"path":"https://docs.ropensci.org/workloopR/reference/read_analyze_wl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"All-in-one import function for work loop files — read_analyze_wl","text":"","code":"read_analyze_wl(file_name, ...)"},{"path":"https://docs.ropensci.org/workloopR/reference/read_analyze_wl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"All-in-one import function for work loop files — read_analyze_wl","text":"file_name .ddf file contains data single workloop experiment ... Additional arguments passed read_ddf(), select_cycles(), analyze_workloop().","code":""},{"path":"https://docs.ropensci.org/workloopR/reference/read_analyze_wl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"All-in-one import function for work loop files — read_analyze_wl","text":"function returns list class analyzed_workloop provides instantaneous velocity, smoothed velocity, computes work,  instantaneous power, net power work loop experiment. data  organized cycle number important metadata stored  Attributes. Within list, entry labeled cycle includes: Time Time, sec Position Length change muscle, corrected gear ratio, mm Force Force, corrected gear ratio, mN Stim stimulation occurs, binary scale Cycle Cycle ID, letter Inst_velocity Instantaneous velocity, computed Position change, reported meters/sec Filt_velocity Instantaneous velocity, low-pass filtering,  meter/sec Inst_Power Instantaneous power, product Force Filt_velocity, reported J Percent_of_Cycle percent particular cycle elapsed addition, following information stored analyzed_workloop object's attributes: stimulus_frequency Frequency stimulus pulses occurred cycle_frequency Frequency oscillations (assuming sine wave trajectory) total_cycles Total number oscillatory cycles (assuming sine wave trajectory) muscle experienced. cycle_def Specifies part cycle understood beginning end. currently three options: 'lo' L0--L0; 'p2p' peak--peak; 't2t' trough--trough amplitude Amplitude length change (assuming sine wave trajectory) phase Phase oscillatory cycle (percent) stimulation occurred. Somewhat experimental, please use caution position_inverted Logical; whether position inversion applied) units units measurement column object running function. See Warning sample_frequency Frequency samples collected header Additional information header units_table Units Channel original ddf file protocol_table Protocol tabular format; taken original ddf file stim_table Specific info stimulus protocol; taken original ddf file stimulus_pulses Number sequential pulses within stimulation train stimulus_offset Timing offset stimulus began gear_ratio Gear ratio applied function file_id File name mtime Time file last modified retained_cycles cycles retained, numerics summary Simple table showing work (J) net power (W)  cycle","code":""},{"path":"https://docs.ropensci.org/workloopR/reference/read_analyze_wl.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"All-in-one import function for work loop files — read_analyze_wl","text":"Please careful units! See Warnings . function combines read_ddf() select_cycles() ultimately analyze_workloop() one handy function. detailed three functions, possible arguments include: cycle_def - used specify part cycle understood beginning end. currently three options: 'lo' L0--L0; 'p2p' peak--peak; 't2t' trough--trough bworth_order - Filter order low-pass filtering Position  via signal::butter prior finding peak lengths. Default: 2. bworth_freq - Critical frequency (scalar) low-pass filtering Position via signal::butter prior finding peak lengths. Default: 0.05. keep_cycles - cycles retained. Default: 4:6. GR - Gear ratio. Default: 1. M - Velocity multiplier used positivize velocity; either -1 1. Default: -1. vel_bf - Critical frequency (scalar) low-pass filtering velocity via signal::butter. Default: 0.05. gear ratio (GR) velocity multiplier (M) parameters can help correct issues related magnitude sign data collection. default, set apply gear ratio adjustment positivize velocity. Instantaneous velocity often noisy vel_bf parameter allows low-pass filtering velocity data. See signal::butter() signal::filtfilt() details filtering achieved.","code":""},{"path":"https://docs.ropensci.org/workloopR/reference/read_analyze_wl.html","id":"warning","dir":"Reference","previous_headings":"","what":"Warning","title":"All-in-one import function for work loop files — read_analyze_wl","text":"systems encountered record Position data millimeters Force millinewtons, therefore function assumes data recorded units. series internal conversions, function computes velocity meters/sec, work Joules, power Watts. raw data originate millimeters millinewtons, please transform data accordingly ignore see attribute units.","code":""},{"path":"https://docs.ropensci.org/workloopR/reference/read_analyze_wl.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"All-in-one import function for work loop files — read_analyze_wl","text":"Josephson RK. 1985. Mechanical Power output Striated Muscle  Cyclic Contraction. Journal Experimental Biology 114: 493-512.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/workloopR/reference/read_analyze_wl.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"All-in-one import function for work loop files — read_analyze_wl","text":"Vikram B. Baliga","code":""},{"path":"https://docs.ropensci.org/workloopR/reference/read_analyze_wl.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"All-in-one import function for work loop files — read_analyze_wl","text":"","code":"library(workloopR)  # import the workloop.ddf file included in workloopR and analyze with # a gear ratio correction of 2 and cycle definition of peak-to-peak wl_dat <- read_analyze_wl(system.file(\"extdata\", \"workloop.ddf\",                                       package = 'workloopR'),                           phase_from_peak = TRUE,                           GR = 2, cycle_def = \"p2p\")"},{"path":"https://docs.ropensci.org/workloopR/reference/read_analyze_wl_dir.html","id":null,"dir":"Reference","previous_headings":"","what":"Read and analyze work loop files from a directory — read_analyze_wl_dir","title":"Read and analyze work loop files from a directory — read_analyze_wl_dir","text":"--one function import multiple workloop .ddf files directory, sort mtime, analyze , store resulting objects ordered list.","code":""},{"path":"https://docs.ropensci.org/workloopR/reference/read_analyze_wl_dir.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read and analyze work loop files from a directory — read_analyze_wl_dir","text":"","code":"read_analyze_wl_dir(file_path, pattern = \"*.ddf\", sort_by = \"mtime\", ...)"},{"path":"https://docs.ropensci.org/workloopR/reference/read_analyze_wl_dir.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read and analyze work loop files from a directory — read_analyze_wl_dir","text":"file_path Directory files located pattern Regular expression used specify files interest. Defaults .ddf files within file_path sort_by Metadata files sorted correct run order. Defaults mtime, time last modification files. ... Additional arguments passed read_analyze_wl(), analyze_workloop(), select_cycles(), read_ddf().","code":""},{"path":"https://docs.ropensci.org/workloopR/reference/read_analyze_wl_dir.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read and analyze work loop files from a directory — read_analyze_wl_dir","text":"list containing analyzed_workloop objects, one file imported subsequently analyzed. list sorted according sort_by parameter, default uses time last modification file's contents (mtime).","code":""},{"path":"https://docs.ropensci.org/workloopR/reference/read_analyze_wl_dir.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Read and analyze work loop files from a directory — read_analyze_wl_dir","text":"Work loop data files imported arranged order run (assuming run order reflected mtime). Chiefly used conjunction summarize_wl_trials() time_correct() time correction desired.","code":""},{"path":"https://docs.ropensci.org/workloopR/reference/read_analyze_wl_dir.html","id":"warning","dir":"Reference","previous_headings":"","what":"Warning","title":"Read and analyze work loop files from a directory — read_analyze_wl_dir","text":"systems encountered record Position data millimeters Force millinewtons, therefore function assumes data recorded units. series internal conversions, function computes velocity meters/sec, work Joules, power Watts. raw data originate millimeters millinewtons, please transform data accordingly ignore see attribute units.","code":""},{"path":"https://docs.ropensci.org/workloopR/reference/read_analyze_wl_dir.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Read and analyze work loop files from a directory — read_analyze_wl_dir","text":"Josephson RK. 1985. Mechanical Power output Striated Muscle  Cyclic Contraction. Journal Experimental Biology 114: 493-512.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/workloopR/reference/read_analyze_wl_dir.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Read and analyze work loop files from a directory — read_analyze_wl_dir","text":"Shreeram Senthivasan","code":""},{"path":"https://docs.ropensci.org/workloopR/reference/read_analyze_wl_dir.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read and analyze work loop files from a directory — read_analyze_wl_dir","text":"","code":"library(workloopR)  # batch read and analyze files included with workloopR analyzed_wls <- read_analyze_wl_dir(system.file(\"extdata/wl_duration_trials\",                                                 package = 'workloopR'),                                     phase_from_peak = TRUE,                                     cycle_def = \"p2p\", keep_cycles = 2:4)"},{"path":"https://docs.ropensci.org/workloopR/reference/read_ddf.html","id":null,"dir":"Reference","previous_headings":"","what":"Import work loop or isometric data from .ddf files — read_ddf","title":"Import work loop or isometric data from .ddf files — read_ddf","text":"read_ddf reads workloop, twitch, tetanus experiment data .ddf files.","code":""},{"path":"https://docs.ropensci.org/workloopR/reference/read_ddf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Import work loop or isometric data from .ddf files — read_ddf","text":"","code":"read_ddf(   file_name,   file_id = NA,   rename_cols = list(c(2, 3), c(\"Position\", \"Force\")),   skip_cols = 4:11,   phase_from_peak = FALSE,   ... )"},{"path":"https://docs.ropensci.org/workloopR/reference/read_ddf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Import work loop or isometric data from .ddf files — read_ddf","text":"file_name .ddf file contains data single workloop, twitch, tetanus experiment file_id string identifying experiment. file name used default. rename_cols List consisting vector indices columns rename vector new column names. See Details. skip_cols Numeric vector column indices skip. See Details. phase_from_peak Logical, indicating whether percent phase stimulation recorded relative peak length relative L0 (default) ... Additional arguments passed /functions work read_ddf()","code":""},{"path":"https://docs.ropensci.org/workloopR/reference/read_ddf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Import work loop or isometric data from .ddf files — read_ddf","text":"object class workloop, twitch, tetanus, inherit class muscle_stim. objects behave like data.frames situations also store metadata ddf attributes. muscle_stim object's columns contain: Time Time Position Length change muscle, uncorrected gear ratio Force Force, uncorrected gear ratio Stim stimulation occurs, binary scale addition, following information stored data.frame's attributes: sample_frequency Frequency samples collected pulses Number sequential pulses within stimulation train total_cycles_lo Total number oscillatory cycles (assuming sine wave trajectory) muscle experienced. Cycles defined respect initial muscle length (L0--L0 opposed peak--peak). amplitude amplitude length change (, assuming sine wave trajectory) cycle_frequency Frequency oscillations (, assuming sine wave trajectory) units units measurement column data.frame. might important attribute please check  makes sense!","code":""},{"path":"https://docs.ropensci.org/workloopR/reference/read_ddf.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Import work loop or isometric data from .ddf files — read_ddf","text":"Read .ddf file contains data experiment. position force correspond columns 2 3 (respectively), replace \"2\" \"3\" within rename_cols accordingly. Similarly, skip_cols = 4:11 adjusted 11 columns present /columns 4:11 contain important data. Please note correction gear ratio manipulation data. See fix_GR adjust gear ratio. Gear ratio can also adjusted prior analyses within analyze_workloop() function, data import --one function read_analyze_wl(), batch analysis --one read_analyze_wl_dir(). Please also note organization data within .ddf file assumed conform used Aurora Scientific's Dynamic Muscle Control Analysis Software. YMMV using .ddf file another source. as_muscle_stim() function can used generate muscle_stim objects data imported via another function. Please feel free contact us issues requests.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/workloopR/reference/read_ddf.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Import work loop or isometric data from .ddf files — read_ddf","text":"Vikram B. Baliga Shreeram Senthivasan","code":""},{"path":"https://docs.ropensci.org/workloopR/reference/read_ddf.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Import work loop or isometric data from .ddf files — read_ddf","text":"","code":"library(workloopR)  # import the workloop.ddf file included in workloopR wl_dat <-read_ddf(system.file(\"extdata\", \"workloop.ddf\",                               package = 'workloopR'),                   phase_from_peak = TRUE)"},{"path":"https://docs.ropensci.org/workloopR/reference/read_ddf_dir.html","id":null,"dir":"Reference","previous_headings":"","what":"Import a batch of work loop or isometric data files from a directory — read_ddf_dir","title":"Import a batch of work loop or isometric data files from a directory — read_ddf_dir","text":"Uses read_ddf() read workloop, twitch, tetanus experiment data multiple .ddf files.","code":""},{"path":"https://docs.ropensci.org/workloopR/reference/read_ddf_dir.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Import a batch of work loop or isometric data files from a directory — read_ddf_dir","text":"","code":"read_ddf_dir(file_path, pattern = \"*.ddf\", sort_by = \"mtime\", ...)"},{"path":"https://docs.ropensci.org/workloopR/reference/read_ddf_dir.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Import a batch of work loop or isometric data files from a directory — read_ddf_dir","text":"file_path Path files stored. folder. pattern Regex pattern identifying relevant files file_path. sort_by Metadata files sorted correct run order. Defaults mtime, time last modification files. ... Additional arguments passed read_ddf().","code":""},{"path":"https://docs.ropensci.org/workloopR/reference/read_ddf_dir.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Import a batch of work loop or isometric data files from a directory — read_ddf_dir","text":"list objects class workloop, twitch, tetanus, inherit class muscle_stim. objects behave like data.frames situations also store metadata ddf attributes. muscle_stim object's columns contain: Time Time Position Length change muscle, uncorrected gear ratio Force Force, uncorrected gear ratio Stim stimulation occurs, binary scale addition, following information stored data.frame's attributes: sample_frequency Frequency samples collected pulses Number sequential pulses within stimulation train total_cycles_lo Total number oscillatory cycles (assuming sine wave trajectory) muscle experienced. Cycles defined respect initial muscle length (L0--L0 opposed peak--peak). amplitude amplitude length change (, assuming sine wave trajectory) cycle_frequency Frequency oscillations (, assuming sine wave trajectory) units units measurement column data.frame. might important attribute please check  makes sense!","code":""},{"path":"https://docs.ropensci.org/workloopR/reference/read_ddf_dir.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Import a batch of work loop or isometric data files from a directory — read_ddf_dir","text":"Read .ddf file contains data experiment. position force correspond columns 2 3 (respectively), replace \"2\" \"3\" within rename_cols accordingly. Similarly, skip_cols = 4:11 adjusted 11 columns present /columns 4:11 contain important data. Please note correction gear ratio manipulation data. See fix_GR adjust gear ratio. Gear ratio can also adjusted prior analyses within analyze_workloop() function, data import --one function read_analyze_wl(), batch analysis --one read_analyze_wl_dir(). Please also note organization data within .ddf file assumed conform used Aurora Scientific's Dynamic Muscle Control Analysis Software. YMMV using .ddf file another source. as_muscle_stim() function can used generate muscle_stim objects data imported via another function. Please feel free contact us issues requests.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/workloopR/reference/read_ddf_dir.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Import a batch of work loop or isometric data files from a directory — read_ddf_dir","text":"Vikram B. Baliga Shreeram Senthivasan","code":""},{"path":"https://docs.ropensci.org/workloopR/reference/read_ddf_dir.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Import a batch of work loop or isometric data files from a directory — read_ddf_dir","text":"","code":"library(workloopR)  # import a set of twitch .ddf files included in workloopR workloop_dat <-read_ddf_dir(system.file(\"extdata/wl_duration_trials\",                  package = 'workloopR'))"},{"path":"https://docs.ropensci.org/workloopR/reference/select_cycles.html","id":null,"dir":"Reference","previous_headings":"","what":"Select cycles from a work loop object — select_cycles","title":"Select cycles from a work loop object — select_cycles","text":"Retain data work loop experiment based position cycle","code":""},{"path":"https://docs.ropensci.org/workloopR/reference/select_cycles.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Select cycles from a work loop object — select_cycles","text":"","code":"select_cycles(   x,   cycle_def,   keep_cycles = 4:6,   bworth_order = 2,   bworth_freq = 0.05,   ... )"},{"path":"https://docs.ropensci.org/workloopR/reference/select_cycles.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Select cycles from a work loop object — select_cycles","text":"x workloop object (see Details organized) cycle_def string specifying cycles defined; one : \"lo\", \"p2p\", \"t2t\". See Details info keep_cycles indices cycles keep. Include 0 keep data identified outside complete cycles bworth_order Filter order low-pass filtering Position via signal::butter() prior finding L0 bworth_freq Critical frequency (scalar) low-pass filtering Position via signal::butter() prior finding L0 ... Additional arguments passed /functions make use select_cycles()","code":""},{"path":"https://docs.ropensci.org/workloopR/reference/select_cycles.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Select cycles from a work loop object — select_cycles","text":"workloop object rows subsetted chosen position cycles. Cycle column appended denote cycle time point associated . Finally, attributes input workloop object retained one new attribute added record cycles original data retained.","code":""},{"path":"https://docs.ropensci.org/workloopR/reference/select_cycles.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Select cycles from a work loop object — select_cycles","text":"select_cycles() subsets data workloop trial position cycle. cycle_def argument used specify part cycle understood beginning end. currently three options:  'lo' L0--L0;  'p2p' peak--peak;  't2t' trough--trough Peaks identified using pracma::findpeaks(). L0 points rising edge found finding midpoints troughs following peak. However first last extrema L0 points may misidentified method. Please plot Position cycles ensure edge cases identified correctly. keep_cycles argument used determine cycles (defined cycle_def retained final dataset. Zero index assigned data points determined outside complete cycle. muscle_stim object (x) must workloop, preferably read one data import functions. Please see documentation as_muscle_stim() need manually construct muscle_stim object another source.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/workloopR/reference/select_cycles.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Select cycles from a work loop object — select_cycles","text":"Vikram B. Baliga Shreeram Senthivasan","code":""},{"path":"https://docs.ropensci.org/workloopR/reference/select_cycles.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Select cycles from a work loop object — select_cycles","text":"","code":"library(workloopR)  # import the workloop.ddf file included in workloopR wl_dat <-read_ddf(system.file(\"extdata\", \"workloop.ddf\",                               package = 'workloopR'),                   phase_from_peak = TRUE)  # select cycles 3 through 5 via the peak-to-peak definition wl_selected <- select_cycles(wl_dat, cycle_def = \"p2p\", keep_cycles = 3:5)   # are the cycles of (approximately) the same length? summary(as.factor(wl_selected$Cycle)) #>   a   b   c  #> 357 357 357"},{"path":"https://docs.ropensci.org/workloopR/reference/summarize_wl_trials.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarize work loop files — summarize_wl_trials","title":"Summarize work loop files — summarize_wl_trials","text":"Summarize important info work loop files stored folder (e.g. sequence trials experiment) including experimental parameters, run order, mtime.","code":""},{"path":"https://docs.ropensci.org/workloopR/reference/summarize_wl_trials.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarize work loop files — summarize_wl_trials","text":"","code":"summarize_wl_trials(wl_list)"},{"path":"https://docs.ropensci.org/workloopR/reference/summarize_wl_trials.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarize work loop files — summarize_wl_trials","text":"wl_list List analyzed_workloop objects, preferably one created read_analyze_wl_dir().","code":""},{"path":"https://docs.ropensci.org/workloopR/reference/summarize_wl_trials.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summarize work loop files — summarize_wl_trials","text":"data.frame information collection workloop files. Columns include: File_ID Name file Cycle_Frequency Frequency Position change Amplitude amplitude Position change Phase Phase oscillatory cycle (percent) stimulation occurred. Somewhat experimental, please use caution Stimulus_Pulses Number stimulation pulses mtime Time file's contents last changed (mtime) Mean_Work Mean work output selected cycles Mean_Power Net power output selected cycles","code":""},{"path":"https://docs.ropensci.org/workloopR/reference/summarize_wl_trials.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Summarize work loop files — summarize_wl_trials","text":"several files (e.g. successive trials one experiment) stored one folder, use function obtain summary stats metadata parameters. function requires list analyze_workloop objects, can readily obtained first running read_analyze_wl_dir() specified directory.","code":""},{"path":"https://docs.ropensci.org/workloopR/reference/summarize_wl_trials.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Summarize work loop files — summarize_wl_trials","text":"Josephson RK. 1985. Mechanical Power output Striated Muscle  Cyclic Contraction. Journal Experimental Biology 114: 493-512.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/workloopR/reference/summarize_wl_trials.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Summarize work loop files — summarize_wl_trials","text":"Vikram B. Baliga Shreeram Senthivasan","code":""},{"path":"https://docs.ropensci.org/workloopR/reference/summarize_wl_trials.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summarize work loop files — summarize_wl_trials","text":"","code":"library(workloopR)  # batch read and analyze files included with workloopR analyzed_wls <- read_analyze_wl_dir(system.file(\"extdata/wl_duration_trials\",                                                package = 'workloopR'),                                     phase_from_peak = TRUE,                                     cycle_def = \"p2p\",                                     keep_cycles = 2:4                                     )  # now summarize summarized_wls <- summarize_wl_trials(analyzed_wls)"},{"path":"https://docs.ropensci.org/workloopR/reference/time_correct.html","id":null,"dir":"Reference","previous_headings":"","what":"Time correction for work loop experiments — time_correct","title":"Time correction for work loop experiments — time_correct","text":"Correct potential degradation muscle time.","code":""},{"path":"https://docs.ropensci.org/workloopR/reference/time_correct.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Time correction for work loop experiments — time_correct","text":"","code":"time_correct(x)"},{"path":"https://docs.ropensci.org/workloopR/reference/time_correct.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Time correction for work loop experiments — time_correct","text":"x data.frame summary data, e.g. object created summarize_wl_trials().","code":""},{"path":"https://docs.ropensci.org/workloopR/reference/time_correct.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Time correction for work loop experiments — time_correct","text":"data.frame additionally contains: Time_Corrected_Work Time corrected work output, transformed  $Mean_Work Time_Corrected_Power Time corrected net power output, transformed $Mean_Power new attributes: power_difference Difference mass-specific net power output final first trials. time_difference Difference mtime final first trials. time_correction_rate Overall rate; power_difference divided  time_difference.","code":""},{"path":"https://docs.ropensci.org/workloopR/reference/time_correct.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Time correction for work loop experiments — time_correct","text":"function assumes across batch successive trials, stimulation parameters first final trials identical. , USE. Decline power output therefore assumed linear function time. Accordingly, difference final first trial's (absolute) power output used 'correct' trials occur , explicit consideration run order time elapsed (via mtime). similar correction procedure applied work.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/workloopR/reference/time_correct.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Time correction for work loop experiments — time_correct","text":"Vikram B. Baliga Shreeram Senthivasan","code":""},{"path":"https://docs.ropensci.org/workloopR/reference/time_correct.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Time correction for work loop experiments — time_correct","text":"","code":"library(workloopR)  # batch read and analyze files included with workloopR analyzed_wls <- read_analyze_wl_dir(system.file(\"extdata/wl_duration_trials\",                                                 package = 'workloopR'),                                     phase_from_peak = TRUE,                                     cycle_def = \"p2p\", keep_cycles = 2:4)  # now summarize summarized_wls <- summarize_wl_trials(analyzed_wls)   # mtimes within the package are not accurate, so we'll supply # our own vector of mtimes summarized_wls$mtime <- read.csv(                           system.file(                             \"extdata/wl_duration_trials/ddfmtimes.csv\",                             package=\"workloopR\"))$mtime  # now time correct timecor_wls <- time_correct(summarized_wls) timecor_wls #>         File_ID Cycle_Frequency Amplitude  Phase Stimulus_Pulses #> 1 01_4pulse.ddf              28      3.15 -24.36               4 #> 2 02_2pulse.ddf              28      3.15 -24.64               2 #> 3 03_6pulse.ddf              28      3.15 -24.92               6 #> 4 04_4pulse.ddf              28      3.15 -24.64               4 #>   Stimulus_Frequency      mtime     Mean_Work   Mean_Power Time_Corrected_Work #> 1                300 1409014596  0.0028362363  0.078967198        0.0028362363 #> 2                300 1409014778  0.0009686570  0.026247519        0.0010905501 #> 3                300 1409015053 -0.0001310863 -0.004017894        0.0001749861 #> 4                300 1409015235  0.0024082708  0.066959552        0.0028362363 #>   Time_Corrected_Power #> 1          0.078967198 #> 2          0.029667538 #> 3          0.004569734 #> 4          0.078967198"},{"path":"https://docs.ropensci.org/workloopR/reference/trapezoidal_integration.html","id":null,"dir":"Reference","previous_headings":"","what":"Approximate the definite integral via the trapezoidal rule — trapezoidal_integration","title":"Approximate the definite integral via the trapezoidal rule — trapezoidal_integration","text":"Mostly meant internal use analysis functions, made available use cases. Accordingly, strictly rely objects class muscle_stim.","code":""},{"path":"https://docs.ropensci.org/workloopR/reference/trapezoidal_integration.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Approximate the definite integral via the trapezoidal rule — trapezoidal_integration","text":"","code":"trapezoidal_integration(x, f)"},{"path":"https://docs.ropensci.org/workloopR/reference/trapezoidal_integration.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Approximate the definite integral via the trapezoidal rule — trapezoidal_integration","text":"x variable, e.g. vector positions f integrand, e.g. vector forces","code":""},{"path":"https://docs.ropensci.org/workloopR/reference/trapezoidal_integration.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Approximate the definite integral via the trapezoidal rule — trapezoidal_integration","text":"numerical value indicating value integral.","code":""},{"path":"https://docs.ropensci.org/workloopR/reference/trapezoidal_integration.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Approximate the definite integral via the trapezoidal rule — trapezoidal_integration","text":"functions analyze_workloop(), read_analyze_wl() , read_analyze_wl_dir(), work calculated difference integral upper curve integral lower curve work loop.","code":""},{"path":"https://docs.ropensci.org/workloopR/reference/trapezoidal_integration.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Approximate the definite integral via the trapezoidal rule — trapezoidal_integration","text":"Atkinson, Kendall E. (1989), Introduction Numerical Analysis (2nd ed.), New York: John Wiley & Sons","code":""},{"path":[]},{"path":"https://docs.ropensci.org/workloopR/reference/trapezoidal_integration.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Approximate the definite integral via the trapezoidal rule — trapezoidal_integration","text":"Vikram B. Baliga","code":""},{"path":"https://docs.ropensci.org/workloopR/reference/trapezoidal_integration.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Approximate the definite integral via the trapezoidal rule — trapezoidal_integration","text":"","code":"# create a circle centered at (x = 10, y = 20) with radius 2 t <- seq(0, 2 * pi, length = 1000) coords <- t(rbind(10 + sin(t) * 2, 20 + cos(t) * 2))   # use the function to get the area trapezoidal_integration(coords[, 1], coords[, 2]) #> [1] 12.56629  # does it match (pi * r^2)? 3.14159265358 * (2^2) # very close #> [1] 12.56637"},{"path":"https://docs.ropensci.org/workloopR/reference/workloopR-package.html","id":null,"dir":"Reference","previous_headings":"","what":"workloopR: Analysis of Work Loops and Other Data from Muscle Physiology Experiments — workloopR-package","title":"workloopR: Analysis of Work Loops and Other Data from Muscle Physiology Experiments — workloopR-package","text":"Functions import, transformation, analysis data      muscle physiology experiments. work loop technique used      evaluate mechanical work power output muscle. Josephson (1985)      <doi:10.1242/jeb.114.1.493> modernized technique     application comparative biomechanics. Although initial motivation      provide functions analyze work loop experiment data,      developed package incorporated ability analyze data      experiments often complementary work loops. currently      three supported experiment types: work loops, simple twitches, tetanus      trials. Data can imported directly .ddf files via object      constructor function. either method, data can cleaned      transformed via methods typically used studies muscle physiology.      Data can analyzed determine timing magnitude force      development relaxation (isometric trials) magnitude work,      net power, instantaneous power among things (work loops).      Although provide plotting functions, resultant objects      designed friendly visualization via either base-R plotting      'tidyverse' functions.  package peer-reviewed rOpenSci (v. 1.1.0).","code":""},{"path":"https://docs.ropensci.org/workloopR/reference/workloopR-package.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"workloopR: Analysis of Work Loops and Other Data from Muscle Physiology Experiments — workloopR-package","text":"Functions import, transformation, analysis muscle physiology experiments. Currently supported experiment types: work loop, simple twitch, tetanus. Data stored .ddf format (e.g. generated Aurora Scientific's Dynamic Muscle Control Analysis Software) easily imported via read_ddf(), read_analyze_wl(), read_analyze_wl_dir(). generates objects class muscle_stim, formatted work nicely workloopR's core functions. Data read  file formats can constructed muscle_stim objects via  as_muscle_stim(). Prior analyses, data can transformed corrected. Transformational functions include gear ratio correction (fix_GR()), position inversion (invert_position()), subsetting particular cycles within work loop experiment (select_cycles()). Core data analytical functions include analyze_workloop() work loop files isometric_timing() twitches. analyze_workloop() computes instantaneous velocity, net work, instantaneous power, net power work loop experiments per-cycle basis. isometric_timing() provides summarization twitch kinetics. functions readily available batch processing files. read_analyze_wl_dir() function allows batch import, cycle selection, gear ratio correction, ultimately work & power computation work loop experiment files within specified directory. get_wl_metadata() summarize_wl_trials() functions organize scanned files recency (according time last modification: 'mtime') report work power output order trials run. ultimately allows time_correct() function correct  degradation muscle (according power & work) time,  assuming first final trials identical experimental  parameters. Please feel free contact either Vikram Shree suggestions code development requests (see contact info ). especially interested expanding data import functions accommodate file types .ddf future versions workloopR.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/workloopR/reference/workloopR-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"workloopR: Analysis of Work Loops and Other Data from Muscle Physiology Experiments — workloopR-package","text":"Maintainer: Vikram B. Baliga vbaliga87@gmail.com (ORCID) Authors: Shreeram Senthivasan shreeramsenthi@gmail.com (ORCID) contributors: Julia Romanowska Julia.Romanowska@uib.(Julia reviewed package rOpenSci              , see <https://github.com/ropensci/software-review/issues/326/>) [reviewer] Eric Brown eb@ericebrown.com (Eric reviewed package rOpenSci              , see <https://github.com/ropensci/software-review/issues/326/>) [reviewer]","code":""},{"path":"https://docs.ropensci.org/workloopR/news/index.html","id":"workloopr-112-2019-11-01","dir":"Changelog","previous_headings":"","what":"workloopR 1.1.2 (2019-11-01)","title":"workloopR 1.1.2 (2019-11-01)","text":"Accepted Journal Open Source Software!! See: https://doi.org/10.21105/joss.01856 updates relate adding JOSS paper info throughout package updates functions code","code":""},{"path":"https://docs.ropensci.org/workloopR/news/index.html","id":"workloopr-111-2019-10-31","dir":"Changelog","previous_headings":"","what":"workloopR 1.1.1 (2019-10-31)","title":"workloopR 1.1.1 (2019-10-31)","text":"Add funding sources paper.md Small fixes language typos Add Issues information README","code":""},{"path":"https://docs.ropensci.org/workloopR/news/index.html","id":"workloopr-110-2019-10-29","dir":"Changelog","previous_headings":"","what":"workloopR 1.1.0 (2019-10-29)","title":"workloopR 1.1.0 (2019-10-29)","text":"2019-10-29: * Accepted rOpenSci!! * Updated links documentation work transfer repo https://github.com/ropensci/ * changes code documentation otherwise, hence change version package 2019-10-24: * New version package following one round peer review rOpenSci. See link details changes: https://github.com/ropensci/software-review/issues/326#issuecomment-545283640 * read_wl.ddf() read_twitch.ddf() renamed read_wl_ddf() read_twitch_ddf(), respectively * Many changes documentation including explicit linking vignettes * Now developmental phase, awaiting feedback rOpenSci editors reviewers","code":""},{"path":"https://docs.ropensci.org/workloopR/news/index.html","id":"workloopr-1019000-2019-10-17","dir":"Changelog","previous_headings":"","what":"workloopR 1.0.1.9000 (2019-10-17)","title":"workloopR 1.0.1.9000 (2019-10-17)","text":"Developmental version: beginning roll changes suggested peer reviewers rOpenSci (https://github.com/ropensci/software-review/issues/326) changes implemented, version bumped (likely 1.1.0) Use caution meantime","code":""},{"path":[]},{"path":"https://docs.ropensci.org/workloopR/news/index.html","id":"documentation-fixes-1-0-1","dir":"Changelog","previous_headings":"","what":"DOCUMENTATION FIXES","title":"workloopR 1.0.1 (2019-08-05)","text":"Fixed typos spelling mistakes via spelling::spell_check_package() Fixed formatting errors README.md Accordingly, package pages created via pkgdown regenerated Re-formatted NEWS.md fit rOpenSci style guides","code":""},{"path":"https://docs.ropensci.org/workloopR/news/index.html","id":"workloopr-100-2019-07-22","dir":"Changelog","previous_headings":"","what":"workloopR 1.0.0 (2019-07-22)","title":"workloopR 1.0.0 (2019-07-22)","text":"Prepped package rOpenSci submission Added NEWS.md file track changes package.","code":""}]
